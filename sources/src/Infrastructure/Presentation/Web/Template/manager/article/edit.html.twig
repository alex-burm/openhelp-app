{% extends 'manager/base.html.twig' %}

{% block header %}Articles{% endblock %}

{% block content %}
    <div class="wrapper">
        <div class="layout">
            <header class="header header--secondary">
                <div class="header__left">
                    {#
                    <div class="form__row">
                        <div class="form__group">
                            <input type="text" class="form__control form__control--m" value="Untitled article">
                        </div>
                    </div>
                    #}
                    <div class="form__row">
                        <div class="form__select">
                            <select class="form__control" name="category" required="" id="category">
                                <option value="">Select category</option>
                                {% for item in categories %}
                                <option value="{{ item.id }}" {{ item.id == article.categoryId ? 'selected' : '' }}>{{ item.name }}</option>
                                {% endfor %}
                            </select>
                            <i class="icon-dropdown"></i>
                        </div>
                    </div>
                </div>

                <div class="header__right">
                    <div class="switch__wrapper">
                        Publish
                        <label class="switch">
                            <input type="checkbox" name="published" id="published" value="{{ article.isPublished ? '1' : '0' }}" {{ article.isPublished ? 'checked' }}>
                            <span class="switch__mode"></span>
                        </label>
                    </div>
                    <a href="{{ path('manager_article_index') }}" class="btn__primary btn__primary--xl">
                        <span class="btn__text">
                            Close
                        </span>
                    </a>
                </div>
            </header>
            <div class="builder">
                <div class="builder__title autoresizable">
                    <textarea rows="1" name="title" id="title" oninput="this.parentNode.dataset.replicatedValue = this.value" placeholder="Untitled article">{{ article.title }}</textarea>
                </div>
                <div id="editor" style="margin-left: -50px;"></div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    <script src="{{ asset('js/editorjs/header.js') }}"></script>
    <script src="{{ asset('js/editorjs/image.js') }}"></script>
    <script src="{{ asset('js/editorjs/delimiter.js') }}"></script>
    <script src="{{ asset('js/editorjs/list.js') }}"></script>
    <script src="{{ asset('js/editorjs/quote.js') }}"></script>
    <script src="{{ asset('js/editorjs/code.js') }}"></script>
    <script src="{{ asset('js/editorjs/embed.js') }}"></script>
    <script src="{{ asset('js/editorjs/table.js') }}"></script>
    <script src="{{ asset('js/editorjs/link.js') }}"></script>
    <script src="{{ asset('js/editorjs/marker.js') }}"></script>
    <script src="{{ asset('js/editorjs/inline-code.js') }}"></script>
    <script src="{{ asset('js/editorjs/raw.js') }}"></script>
    <script src="{{ asset('js/editorjs/main.js') }}"></script>

    <script>
        const editor = new EditorJS({
            holder: 'editor',
            data: {{ article.content|default('{}')|raw }},
            autofocus: true,
            placeholder: 'Type text here...',

            tools: {
                paragraph: {
                    inlineToolbar: true,
                    config: {
                        preserveBlank: true,
                        placeholder: 'Type text here...'
                    }
                },
                header: {
                    class: Header,
                    inlineToolbar: ['marker', 'link'],
                    config: {
                        placeholder: 'Header'
                    },
                },
                image: {
                    class: ImageTool,
                    config: {
                        uploader: {
                            uploadByFile: (file) => {
                                return new Promise((resolve, reject) => {
                                    const formData = new FormData();
                                    formData.append('file', file);

                                    fetch('{{ path('manager_default_upload_file') }}', {
                                        method: 'POST',
                                        body: formData,
                                    })
                                    .then(response => response.json())
                                    .then(data => {
                                        resolve({
                                            success: 1,
                                            file: {
                                                url: data.url,
                                            }
                                        });
                                    })
                                    .catch(error => reject(error));
                                });
                            },
                        }
                    }
                },

                list: {
                    class: EditorjsList,
                    inlineToolbar: true,
                },

                quote: {
                    class: Quote,
                    inlineToolbar: true,
                    config: {
                        quotePlaceholder: 'Enter a quote',
                        captionPlaceholder: 'Quote\'s author',
                    },
                },

                marker: {
                    class:  Marker,
                },

                code: {
                    class:  CodeTool,
                },

                delimiter: Delimiter,

                inlineCode: {
                    class: InlineCode,
                },

                linkTool: LinkTool,

                raw: RawTool,
                embed: Embed,

                table: {
                    class: Table,
                    inlineToolbar: true,
                },
            },
            onChange: () => saveArticle(),
        });

        const saveArticle = async () => {
            fetch('{{ path('manager_article_edit', {id: app.request.attributes.get('id')}) }}', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: new URLSearchParams({
                    title: document.getElementById('title').value,
                    content: JSON.stringify(await editor.saver.save()),
                    _token: '{{ csrf_token }}'
                }),
            });
        }

        let debounceHandler;
        document.getElementById('title').addEventListener('input', () => {
            clearTimeout(debounceHandler);
            debounceHandler = setTimeout(() => saveArticle(), 500);
        })

        document.getElementById('published').addEventListener('change', e => {
            fetch('{{ path('manager_article_status', {id: article.id}) }}', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: new URLSearchParams({
                    publish: e.target.checked ? '1' : '0',
                    _token: '{{ csrf_token }}'
                }),
            });
        });

        document.getElementById('category').addEventListener('change', e => {
            fetch('{{ path('manager_article_category', {id: article.id}) }}', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: new URLSearchParams({
                    categoryId: e.target.value,
                    _token: '{{ csrf_token }}'
                }),
            });
        });
    </script>
{% endblock %}

# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    uploads_path: '%kernel.project_dir%/public/uploads'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $secret: '%env(APP_SECRET)%'
    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Infrastructure/Persistence/Doctrine/Entity'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    redis_connection:
        class: Redis
        factory: ['Symfony\Component\Cache\Adapter\RedisAdapter', 'createConnection']
        arguments:
            - '%env(REDIS_URL)%'

    App\Domain\User\Repository\UserRepositoryInterface: '@App\Infrastructure\Persistence\Doctrine\Repository\DoctrineUserRepository'
    App\Domain\User\Repository\PasswordResetTokenRepository: '@App\Infrastructure\Persistence\Redis\Repository\RedisPasswordResetTokenRepository'
    App\Domain\User\Service\PasswordHasher: '@App\Infrastructure\Security\PasswordHasherService'
    App\Domain\User\Service\CurrentUserProviderInterface: '@App\Infrastructure\Security\CurrentUserProvider'
    App\Domain\Ticket\Repository\TicketRepositoryInterface: '@App\Infrastructure\Persistence\Doctrine\Repository\DoctrineTicketRepository'
    App\Domain\Article\Repository\ArticleRepositoryInterface: '@App\Infrastructure\Persistence\Doctrine\Repository\DoctrineArticleRepository'
    App\Domain\Messaging\Repository\MessageRepositoryInterface: '@App\Infrastructure\Persistence\Doctrine\Repository\DoctrineMessageRepository'
    App\Domain\Workspace\Repository\WorkspaceRepositoryInterface: '@App\Infrastructure\Persistence\Doctrine\Repository\DoctrineWorkspaceRepository'
    App\Domain\Settings\Repository\SettingsRepositoryInterface: '@App\Infrastructure\Persistence\Doctrine\Repository\DoctrineSettingsRepository'
    App\Domain\Service\MailHandlerInterface: '@App\Infrastructure\Service\MailHandler'
    App\Domain\Common\Event\EventDispatcherInterface: '@App\Infrastructure\Common\Adapter\EventDispatcherAdapter'
    App\Domain\Common\Encryptor\EncryptorInterface: '@App\Infrastructure\Common\Encryptor\Symmetric\SymmetricSodiumEncryptor'
#    App\Domain\Common\Encryptor\EncryptorInterface: '@App\Infrastructure\Common\Encryptor\Symmetric\SymmetricOpenSSLEncryptor'
#    App\Domain\Common\Encryptor\EncryptorInterface: '@App\Infrastructure\Common\Encryptor\Unidirectional\UnidirectionalSodiumEncryptor'
#    App\Domain\Common\Encryptor√Ç\EncryptorInterface: '@App\Infrastructure\Common\Encryptor\Unidirectional\UnidirectionalOpenSSLEncryptor'
#    App\Domain\Common\Encryptor\EncryptorInterface: '@App\Infrastructure\Common\Encryptor\Bidirectional\BidirectionalOpenSSLEncryptor'
#    App\Domain\Common\Encryptor\EncryptorInterface: '@App\Infrastructure\Common\Encryptor\Bidirectional\BidirectionalSodiumEncryptor'
    App\Domain\Mail\Incoming\Service\MailFetcherInterface: '@App\Infrastructure\Mail\Imap\ImapMailFetcher'
    App\Application\User\Service\PasswordResetServiceInterface: '@App\Application\User\Service\PasswordResetService'
    App\Application\Ticket\ReadModel\RecentTicketViewRepository: '@App\Infrastructure\Persistence\Redis\Repository\RedisRecentTicketViewRepository'
    App\Domain\Signature\SignerInterface: '@App\Infrastructure\Security\Signature\HmacSha256Signer'

    App\Infrastructure\Service\FileUploaderService:
        arguments:
            $uploadsPath: '%uploads_path%'

    App\Infrastructure\Persistence\Redis\Repository\RedisRecentTicketViewRepository:
        arguments:
            $redis: '@redis_connection'

    App\Application\Normalization\DtoNormalizerRegistry:
        arguments:
            $normalizers:
                - '@App\Application\Normalization\MessageViewNormalizer'
                - '@App\Application\Normalization\MessageCollectionNormalizer'

    App\Infrastructure\Persistence\Redis\LoginRateLimiterStorage:
        arguments:
            $rateLimiterFactory: '@limiter.login_attempts'

    App\Infrastructure\Persistence\Redis\ForgotPasswordLimiterStorage:
        arguments:
            $rateLimiterFactory: '@limiter.forgot_password'

    App\Infrastructure\Persistence\Redis\TicketRequestLimiterStorage:
        arguments:
            $rateLimiterFactory: '@limiter.ticket_request'

    App\Application\Messaging\Service\MessagePublisherInterface:
        class: App\Infrastructure\Messaging\Centrifugo\CentrifugoMessagePublisher
        arguments:
            $apiUrl: '%env(CENTRIFUGO_HOST)%'
            $apiKey: '%env(CENTRIFUGO_API_KEY)%'

    monolog.processor.memory_usage:
        class: Monolog\Processor\MemoryUsageProcessor
        tags:
            - { name: monolog.processor }

    monolog.processor.request_id:
        class: App\Infrastructure\Service\Logger\RequestIdProcessor
        tags:
            - { name: monolog.processor }

    monolog.processor.user_id:
        class: App\Infrastructure\Service\Logger\UserIdProcessor
        tags:
            - { name: monolog.processor }

    Elastic\Elasticsearch\Client:
        factory: ['App\Infrastructure\Persistence\Elastic\ElasticClientFactory', 'create']

    App\Infrastructure\Persistence\Elastic\SearchProvider\SuggestSearchProvider:
        tags:
            - { name: app.search_provider }

    App\Application\Search\SearchProviderLocator:
        arguments:
            $providers: !tagged_iterator 'app.search_provider'

when@test:
    services:
        # default configuration for services in *this* file
        _defaults:
            autowire: true      # Automatically injects dependencies in your services.
            autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
            public: true

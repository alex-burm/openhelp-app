{"version":3,"file":"live.js","sources":["../../node_modules/@hotwired/stimulus/dist/stimulus.js","../../vendor/symfony/ux-live-component/assets/dist/live_controller.js","../../assets/live/controllers/TicketListController.js","../../assets/live/controllers/UserAutocompleteController.js","../../assets/live/controllers/RecentTicketsController.js","../../assets/live/controllers/TicketHeaderController.js","../../assets/live/bootstrap.js"],"sourcesContent":["/*\nStimulus 3.2.1\nCopyright Â© 2023 Basecamp, LLC\n */\nclass EventListener {\n    constructor(eventTarget, eventName, eventOptions) {\n        this.eventTarget = eventTarget;\n        this.eventName = eventName;\n        this.eventOptions = eventOptions;\n        this.unorderedBindings = new Set();\n    }\n    connect() {\n        this.eventTarget.addEventListener(this.eventName, this, this.eventOptions);\n    }\n    disconnect() {\n        this.eventTarget.removeEventListener(this.eventName, this, this.eventOptions);\n    }\n    bindingConnected(binding) {\n        this.unorderedBindings.add(binding);\n    }\n    bindingDisconnected(binding) {\n        this.unorderedBindings.delete(binding);\n    }\n    handleEvent(event) {\n        const extendedEvent = extendEvent(event);\n        for (const binding of this.bindings) {\n            if (extendedEvent.immediatePropagationStopped) {\n                break;\n            }\n            else {\n                binding.handleEvent(extendedEvent);\n            }\n        }\n    }\n    hasBindings() {\n        return this.unorderedBindings.size > 0;\n    }\n    get bindings() {\n        return Array.from(this.unorderedBindings).sort((left, right) => {\n            const leftIndex = left.index, rightIndex = right.index;\n            return leftIndex < rightIndex ? -1 : leftIndex > rightIndex ? 1 : 0;\n        });\n    }\n}\nfunction extendEvent(event) {\n    if (\"immediatePropagationStopped\" in event) {\n        return event;\n    }\n    else {\n        const { stopImmediatePropagation } = event;\n        return Object.assign(event, {\n            immediatePropagationStopped: false,\n            stopImmediatePropagation() {\n                this.immediatePropagationStopped = true;\n                stopImmediatePropagation.call(this);\n            },\n        });\n    }\n}\n\nclass Dispatcher {\n    constructor(application) {\n        this.application = application;\n        this.eventListenerMaps = new Map();\n        this.started = false;\n    }\n    start() {\n        if (!this.started) {\n            this.started = true;\n            this.eventListeners.forEach((eventListener) => eventListener.connect());\n        }\n    }\n    stop() {\n        if (this.started) {\n            this.started = false;\n            this.eventListeners.forEach((eventListener) => eventListener.disconnect());\n        }\n    }\n    get eventListeners() {\n        return Array.from(this.eventListenerMaps.values()).reduce((listeners, map) => listeners.concat(Array.from(map.values())), []);\n    }\n    bindingConnected(binding) {\n        this.fetchEventListenerForBinding(binding).bindingConnected(binding);\n    }\n    bindingDisconnected(binding, clearEventListeners = false) {\n        this.fetchEventListenerForBinding(binding).bindingDisconnected(binding);\n        if (clearEventListeners)\n            this.clearEventListenersForBinding(binding);\n    }\n    handleError(error, message, detail = {}) {\n        this.application.handleError(error, `Error ${message}`, detail);\n    }\n    clearEventListenersForBinding(binding) {\n        const eventListener = this.fetchEventListenerForBinding(binding);\n        if (!eventListener.hasBindings()) {\n            eventListener.disconnect();\n            this.removeMappedEventListenerFor(binding);\n        }\n    }\n    removeMappedEventListenerFor(binding) {\n        const { eventTarget, eventName, eventOptions } = binding;\n        const eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget);\n        const cacheKey = this.cacheKey(eventName, eventOptions);\n        eventListenerMap.delete(cacheKey);\n        if (eventListenerMap.size == 0)\n            this.eventListenerMaps.delete(eventTarget);\n    }\n    fetchEventListenerForBinding(binding) {\n        const { eventTarget, eventName, eventOptions } = binding;\n        return this.fetchEventListener(eventTarget, eventName, eventOptions);\n    }\n    fetchEventListener(eventTarget, eventName, eventOptions) {\n        const eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget);\n        const cacheKey = this.cacheKey(eventName, eventOptions);\n        let eventListener = eventListenerMap.get(cacheKey);\n        if (!eventListener) {\n            eventListener = this.createEventListener(eventTarget, eventName, eventOptions);\n            eventListenerMap.set(cacheKey, eventListener);\n        }\n        return eventListener;\n    }\n    createEventListener(eventTarget, eventName, eventOptions) {\n        const eventListener = new EventListener(eventTarget, eventName, eventOptions);\n        if (this.started) {\n            eventListener.connect();\n        }\n        return eventListener;\n    }\n    fetchEventListenerMapForEventTarget(eventTarget) {\n        let eventListenerMap = this.eventListenerMaps.get(eventTarget);\n        if (!eventListenerMap) {\n            eventListenerMap = new Map();\n            this.eventListenerMaps.set(eventTarget, eventListenerMap);\n        }\n        return eventListenerMap;\n    }\n    cacheKey(eventName, eventOptions) {\n        const parts = [eventName];\n        Object.keys(eventOptions)\n            .sort()\n            .forEach((key) => {\n            parts.push(`${eventOptions[key] ? \"\" : \"!\"}${key}`);\n        });\n        return parts.join(\":\");\n    }\n}\n\nconst defaultActionDescriptorFilters = {\n    stop({ event, value }) {\n        if (value)\n            event.stopPropagation();\n        return true;\n    },\n    prevent({ event, value }) {\n        if (value)\n            event.preventDefault();\n        return true;\n    },\n    self({ event, value, element }) {\n        if (value) {\n            return element === event.target;\n        }\n        else {\n            return true;\n        }\n    },\n};\nconst descriptorPattern = /^(?:(?:([^.]+?)\\+)?(.+?)(?:\\.(.+?))?(?:@(window|document))?->)?(.+?)(?:#([^:]+?))(?::(.+))?$/;\nfunction parseActionDescriptorString(descriptorString) {\n    const source = descriptorString.trim();\n    const matches = source.match(descriptorPattern) || [];\n    let eventName = matches[2];\n    let keyFilter = matches[3];\n    if (keyFilter && ![\"keydown\", \"keyup\", \"keypress\"].includes(eventName)) {\n        eventName += `.${keyFilter}`;\n        keyFilter = \"\";\n    }\n    return {\n        eventTarget: parseEventTarget(matches[4]),\n        eventName,\n        eventOptions: matches[7] ? parseEventOptions(matches[7]) : {},\n        identifier: matches[5],\n        methodName: matches[6],\n        keyFilter: matches[1] || keyFilter,\n    };\n}\nfunction parseEventTarget(eventTargetName) {\n    if (eventTargetName == \"window\") {\n        return window;\n    }\n    else if (eventTargetName == \"document\") {\n        return document;\n    }\n}\nfunction parseEventOptions(eventOptions) {\n    return eventOptions\n        .split(\":\")\n        .reduce((options, token) => Object.assign(options, { [token.replace(/^!/, \"\")]: !/^!/.test(token) }), {});\n}\nfunction stringifyEventTarget(eventTarget) {\n    if (eventTarget == window) {\n        return \"window\";\n    }\n    else if (eventTarget == document) {\n        return \"document\";\n    }\n}\n\nfunction camelize(value) {\n    return value.replace(/(?:[_-])([a-z0-9])/g, (_, char) => char.toUpperCase());\n}\nfunction namespaceCamelize(value) {\n    return camelize(value.replace(/--/g, \"-\").replace(/__/g, \"_\"));\n}\nfunction capitalize(value) {\n    return value.charAt(0).toUpperCase() + value.slice(1);\n}\nfunction dasherize(value) {\n    return value.replace(/([A-Z])/g, (_, char) => `-${char.toLowerCase()}`);\n}\nfunction tokenize(value) {\n    return value.match(/[^\\s]+/g) || [];\n}\n\nfunction isSomething(object) {\n    return object !== null && object !== undefined;\n}\nfunction hasProperty(object, property) {\n    return Object.prototype.hasOwnProperty.call(object, property);\n}\n\nconst allModifiers = [\"meta\", \"ctrl\", \"alt\", \"shift\"];\nclass Action {\n    constructor(element, index, descriptor, schema) {\n        this.element = element;\n        this.index = index;\n        this.eventTarget = descriptor.eventTarget || element;\n        this.eventName = descriptor.eventName || getDefaultEventNameForElement(element) || error(\"missing event name\");\n        this.eventOptions = descriptor.eventOptions || {};\n        this.identifier = descriptor.identifier || error(\"missing identifier\");\n        this.methodName = descriptor.methodName || error(\"missing method name\");\n        this.keyFilter = descriptor.keyFilter || \"\";\n        this.schema = schema;\n    }\n    static forToken(token, schema) {\n        return new this(token.element, token.index, parseActionDescriptorString(token.content), schema);\n    }\n    toString() {\n        const eventFilter = this.keyFilter ? `.${this.keyFilter}` : \"\";\n        const eventTarget = this.eventTargetName ? `@${this.eventTargetName}` : \"\";\n        return `${this.eventName}${eventFilter}${eventTarget}->${this.identifier}#${this.methodName}`;\n    }\n    shouldIgnoreKeyboardEvent(event) {\n        if (!this.keyFilter) {\n            return false;\n        }\n        const filters = this.keyFilter.split(\"+\");\n        if (this.keyFilterDissatisfied(event, filters)) {\n            return true;\n        }\n        const standardFilter = filters.filter((key) => !allModifiers.includes(key))[0];\n        if (!standardFilter) {\n            return false;\n        }\n        if (!hasProperty(this.keyMappings, standardFilter)) {\n            error(`contains unknown key filter: ${this.keyFilter}`);\n        }\n        return this.keyMappings[standardFilter].toLowerCase() !== event.key.toLowerCase();\n    }\n    shouldIgnoreMouseEvent(event) {\n        if (!this.keyFilter) {\n            return false;\n        }\n        const filters = [this.keyFilter];\n        if (this.keyFilterDissatisfied(event, filters)) {\n            return true;\n        }\n        return false;\n    }\n    get params() {\n        const params = {};\n        const pattern = new RegExp(`^data-${this.identifier}-(.+)-param$`, \"i\");\n        for (const { name, value } of Array.from(this.element.attributes)) {\n            const match = name.match(pattern);\n            const key = match && match[1];\n            if (key) {\n                params[camelize(key)] = typecast(value);\n            }\n        }\n        return params;\n    }\n    get eventTargetName() {\n        return stringifyEventTarget(this.eventTarget);\n    }\n    get keyMappings() {\n        return this.schema.keyMappings;\n    }\n    keyFilterDissatisfied(event, filters) {\n        const [meta, ctrl, alt, shift] = allModifiers.map((modifier) => filters.includes(modifier));\n        return event.metaKey !== meta || event.ctrlKey !== ctrl || event.altKey !== alt || event.shiftKey !== shift;\n    }\n}\nconst defaultEventNames = {\n    a: () => \"click\",\n    button: () => \"click\",\n    form: () => \"submit\",\n    details: () => \"toggle\",\n    input: (e) => (e.getAttribute(\"type\") == \"submit\" ? \"click\" : \"input\"),\n    select: () => \"change\",\n    textarea: () => \"input\",\n};\nfunction getDefaultEventNameForElement(element) {\n    const tagName = element.tagName.toLowerCase();\n    if (tagName in defaultEventNames) {\n        return defaultEventNames[tagName](element);\n    }\n}\nfunction error(message) {\n    throw new Error(message);\n}\nfunction typecast(value) {\n    try {\n        return JSON.parse(value);\n    }\n    catch (o_O) {\n        return value;\n    }\n}\n\nclass Binding {\n    constructor(context, action) {\n        this.context = context;\n        this.action = action;\n    }\n    get index() {\n        return this.action.index;\n    }\n    get eventTarget() {\n        return this.action.eventTarget;\n    }\n    get eventOptions() {\n        return this.action.eventOptions;\n    }\n    get identifier() {\n        return this.context.identifier;\n    }\n    handleEvent(event) {\n        const actionEvent = this.prepareActionEvent(event);\n        if (this.willBeInvokedByEvent(event) && this.applyEventModifiers(actionEvent)) {\n            this.invokeWithEvent(actionEvent);\n        }\n    }\n    get eventName() {\n        return this.action.eventName;\n    }\n    get method() {\n        const method = this.controller[this.methodName];\n        if (typeof method == \"function\") {\n            return method;\n        }\n        throw new Error(`Action \"${this.action}\" references undefined method \"${this.methodName}\"`);\n    }\n    applyEventModifiers(event) {\n        const { element } = this.action;\n        const { actionDescriptorFilters } = this.context.application;\n        const { controller } = this.context;\n        let passes = true;\n        for (const [name, value] of Object.entries(this.eventOptions)) {\n            if (name in actionDescriptorFilters) {\n                const filter = actionDescriptorFilters[name];\n                passes = passes && filter({ name, value, event, element, controller });\n            }\n            else {\n                continue;\n            }\n        }\n        return passes;\n    }\n    prepareActionEvent(event) {\n        return Object.assign(event, { params: this.action.params });\n    }\n    invokeWithEvent(event) {\n        const { target, currentTarget } = event;\n        try {\n            this.method.call(this.controller, event);\n            this.context.logDebugActivity(this.methodName, { event, target, currentTarget, action: this.methodName });\n        }\n        catch (error) {\n            const { identifier, controller, element, index } = this;\n            const detail = { identifier, controller, element, index, event };\n            this.context.handleError(error, `invoking action \"${this.action}\"`, detail);\n        }\n    }\n    willBeInvokedByEvent(event) {\n        const eventTarget = event.target;\n        if (event instanceof KeyboardEvent && this.action.shouldIgnoreKeyboardEvent(event)) {\n            return false;\n        }\n        if (event instanceof MouseEvent && this.action.shouldIgnoreMouseEvent(event)) {\n            return false;\n        }\n        if (this.element === eventTarget) {\n            return true;\n        }\n        else if (eventTarget instanceof Element && this.element.contains(eventTarget)) {\n            return this.scope.containsElement(eventTarget);\n        }\n        else {\n            return this.scope.containsElement(this.action.element);\n        }\n    }\n    get controller() {\n        return this.context.controller;\n    }\n    get methodName() {\n        return this.action.methodName;\n    }\n    get element() {\n        return this.scope.element;\n    }\n    get scope() {\n        return this.context.scope;\n    }\n}\n\nclass ElementObserver {\n    constructor(element, delegate) {\n        this.mutationObserverInit = { attributes: true, childList: true, subtree: true };\n        this.element = element;\n        this.started = false;\n        this.delegate = delegate;\n        this.elements = new Set();\n        this.mutationObserver = new MutationObserver((mutations) => this.processMutations(mutations));\n    }\n    start() {\n        if (!this.started) {\n            this.started = true;\n            this.mutationObserver.observe(this.element, this.mutationObserverInit);\n            this.refresh();\n        }\n    }\n    pause(callback) {\n        if (this.started) {\n            this.mutationObserver.disconnect();\n            this.started = false;\n        }\n        callback();\n        if (!this.started) {\n            this.mutationObserver.observe(this.element, this.mutationObserverInit);\n            this.started = true;\n        }\n    }\n    stop() {\n        if (this.started) {\n            this.mutationObserver.takeRecords();\n            this.mutationObserver.disconnect();\n            this.started = false;\n        }\n    }\n    refresh() {\n        if (this.started) {\n            const matches = new Set(this.matchElementsInTree());\n            for (const element of Array.from(this.elements)) {\n                if (!matches.has(element)) {\n                    this.removeElement(element);\n                }\n            }\n            for (const element of Array.from(matches)) {\n                this.addElement(element);\n            }\n        }\n    }\n    processMutations(mutations) {\n        if (this.started) {\n            for (const mutation of mutations) {\n                this.processMutation(mutation);\n            }\n        }\n    }\n    processMutation(mutation) {\n        if (mutation.type == \"attributes\") {\n            this.processAttributeChange(mutation.target, mutation.attributeName);\n        }\n        else if (mutation.type == \"childList\") {\n            this.processRemovedNodes(mutation.removedNodes);\n            this.processAddedNodes(mutation.addedNodes);\n        }\n    }\n    processAttributeChange(element, attributeName) {\n        if (this.elements.has(element)) {\n            if (this.delegate.elementAttributeChanged && this.matchElement(element)) {\n                this.delegate.elementAttributeChanged(element, attributeName);\n            }\n            else {\n                this.removeElement(element);\n            }\n        }\n        else if (this.matchElement(element)) {\n            this.addElement(element);\n        }\n    }\n    processRemovedNodes(nodes) {\n        for (const node of Array.from(nodes)) {\n            const element = this.elementFromNode(node);\n            if (element) {\n                this.processTree(element, this.removeElement);\n            }\n        }\n    }\n    processAddedNodes(nodes) {\n        for (const node of Array.from(nodes)) {\n            const element = this.elementFromNode(node);\n            if (element && this.elementIsActive(element)) {\n                this.processTree(element, this.addElement);\n            }\n        }\n    }\n    matchElement(element) {\n        return this.delegate.matchElement(element);\n    }\n    matchElementsInTree(tree = this.element) {\n        return this.delegate.matchElementsInTree(tree);\n    }\n    processTree(tree, processor) {\n        for (const element of this.matchElementsInTree(tree)) {\n            processor.call(this, element);\n        }\n    }\n    elementFromNode(node) {\n        if (node.nodeType == Node.ELEMENT_NODE) {\n            return node;\n        }\n    }\n    elementIsActive(element) {\n        if (element.isConnected != this.element.isConnected) {\n            return false;\n        }\n        else {\n            return this.element.contains(element);\n        }\n    }\n    addElement(element) {\n        if (!this.elements.has(element)) {\n            if (this.elementIsActive(element)) {\n                this.elements.add(element);\n                if (this.delegate.elementMatched) {\n                    this.delegate.elementMatched(element);\n                }\n            }\n        }\n    }\n    removeElement(element) {\n        if (this.elements.has(element)) {\n            this.elements.delete(element);\n            if (this.delegate.elementUnmatched) {\n                this.delegate.elementUnmatched(element);\n            }\n        }\n    }\n}\n\nclass AttributeObserver {\n    constructor(element, attributeName, delegate) {\n        this.attributeName = attributeName;\n        this.delegate = delegate;\n        this.elementObserver = new ElementObserver(element, this);\n    }\n    get element() {\n        return this.elementObserver.element;\n    }\n    get selector() {\n        return `[${this.attributeName}]`;\n    }\n    start() {\n        this.elementObserver.start();\n    }\n    pause(callback) {\n        this.elementObserver.pause(callback);\n    }\n    stop() {\n        this.elementObserver.stop();\n    }\n    refresh() {\n        this.elementObserver.refresh();\n    }\n    get started() {\n        return this.elementObserver.started;\n    }\n    matchElement(element) {\n        return element.hasAttribute(this.attributeName);\n    }\n    matchElementsInTree(tree) {\n        const match = this.matchElement(tree) ? [tree] : [];\n        const matches = Array.from(tree.querySelectorAll(this.selector));\n        return match.concat(matches);\n    }\n    elementMatched(element) {\n        if (this.delegate.elementMatchedAttribute) {\n            this.delegate.elementMatchedAttribute(element, this.attributeName);\n        }\n    }\n    elementUnmatched(element) {\n        if (this.delegate.elementUnmatchedAttribute) {\n            this.delegate.elementUnmatchedAttribute(element, this.attributeName);\n        }\n    }\n    elementAttributeChanged(element, attributeName) {\n        if (this.delegate.elementAttributeValueChanged && this.attributeName == attributeName) {\n            this.delegate.elementAttributeValueChanged(element, attributeName);\n        }\n    }\n}\n\nfunction add(map, key, value) {\n    fetch(map, key).add(value);\n}\nfunction del(map, key, value) {\n    fetch(map, key).delete(value);\n    prune(map, key);\n}\nfunction fetch(map, key) {\n    let values = map.get(key);\n    if (!values) {\n        values = new Set();\n        map.set(key, values);\n    }\n    return values;\n}\nfunction prune(map, key) {\n    const values = map.get(key);\n    if (values != null && values.size == 0) {\n        map.delete(key);\n    }\n}\n\nclass Multimap {\n    constructor() {\n        this.valuesByKey = new Map();\n    }\n    get keys() {\n        return Array.from(this.valuesByKey.keys());\n    }\n    get values() {\n        const sets = Array.from(this.valuesByKey.values());\n        return sets.reduce((values, set) => values.concat(Array.from(set)), []);\n    }\n    get size() {\n        const sets = Array.from(this.valuesByKey.values());\n        return sets.reduce((size, set) => size + set.size, 0);\n    }\n    add(key, value) {\n        add(this.valuesByKey, key, value);\n    }\n    delete(key, value) {\n        del(this.valuesByKey, key, value);\n    }\n    has(key, value) {\n        const values = this.valuesByKey.get(key);\n        return values != null && values.has(value);\n    }\n    hasKey(key) {\n        return this.valuesByKey.has(key);\n    }\n    hasValue(value) {\n        const sets = Array.from(this.valuesByKey.values());\n        return sets.some((set) => set.has(value));\n    }\n    getValuesForKey(key) {\n        const values = this.valuesByKey.get(key);\n        return values ? Array.from(values) : [];\n    }\n    getKeysForValue(value) {\n        return Array.from(this.valuesByKey)\n            .filter(([_key, values]) => values.has(value))\n            .map(([key, _values]) => key);\n    }\n}\n\nclass IndexedMultimap extends Multimap {\n    constructor() {\n        super();\n        this.keysByValue = new Map();\n    }\n    get values() {\n        return Array.from(this.keysByValue.keys());\n    }\n    add(key, value) {\n        super.add(key, value);\n        add(this.keysByValue, value, key);\n    }\n    delete(key, value) {\n        super.delete(key, value);\n        del(this.keysByValue, value, key);\n    }\n    hasValue(value) {\n        return this.keysByValue.has(value);\n    }\n    getKeysForValue(value) {\n        const set = this.keysByValue.get(value);\n        return set ? Array.from(set) : [];\n    }\n}\n\nclass SelectorObserver {\n    constructor(element, selector, delegate, details) {\n        this._selector = selector;\n        this.details = details;\n        this.elementObserver = new ElementObserver(element, this);\n        this.delegate = delegate;\n        this.matchesByElement = new Multimap();\n    }\n    get started() {\n        return this.elementObserver.started;\n    }\n    get selector() {\n        return this._selector;\n    }\n    set selector(selector) {\n        this._selector = selector;\n        this.refresh();\n    }\n    start() {\n        this.elementObserver.start();\n    }\n    pause(callback) {\n        this.elementObserver.pause(callback);\n    }\n    stop() {\n        this.elementObserver.stop();\n    }\n    refresh() {\n        this.elementObserver.refresh();\n    }\n    get element() {\n        return this.elementObserver.element;\n    }\n    matchElement(element) {\n        const { selector } = this;\n        if (selector) {\n            const matches = element.matches(selector);\n            if (this.delegate.selectorMatchElement) {\n                return matches && this.delegate.selectorMatchElement(element, this.details);\n            }\n            return matches;\n        }\n        else {\n            return false;\n        }\n    }\n    matchElementsInTree(tree) {\n        const { selector } = this;\n        if (selector) {\n            const match = this.matchElement(tree) ? [tree] : [];\n            const matches = Array.from(tree.querySelectorAll(selector)).filter((match) => this.matchElement(match));\n            return match.concat(matches);\n        }\n        else {\n            return [];\n        }\n    }\n    elementMatched(element) {\n        const { selector } = this;\n        if (selector) {\n            this.selectorMatched(element, selector);\n        }\n    }\n    elementUnmatched(element) {\n        const selectors = this.matchesByElement.getKeysForValue(element);\n        for (const selector of selectors) {\n            this.selectorUnmatched(element, selector);\n        }\n    }\n    elementAttributeChanged(element, _attributeName) {\n        const { selector } = this;\n        if (selector) {\n            const matches = this.matchElement(element);\n            const matchedBefore = this.matchesByElement.has(selector, element);\n            if (matches && !matchedBefore) {\n                this.selectorMatched(element, selector);\n            }\n            else if (!matches && matchedBefore) {\n                this.selectorUnmatched(element, selector);\n            }\n        }\n    }\n    selectorMatched(element, selector) {\n        this.delegate.selectorMatched(element, selector, this.details);\n        this.matchesByElement.add(selector, element);\n    }\n    selectorUnmatched(element, selector) {\n        this.delegate.selectorUnmatched(element, selector, this.details);\n        this.matchesByElement.delete(selector, element);\n    }\n}\n\nclass StringMapObserver {\n    constructor(element, delegate) {\n        this.element = element;\n        this.delegate = delegate;\n        this.started = false;\n        this.stringMap = new Map();\n        this.mutationObserver = new MutationObserver((mutations) => this.processMutations(mutations));\n    }\n    start() {\n        if (!this.started) {\n            this.started = true;\n            this.mutationObserver.observe(this.element, { attributes: true, attributeOldValue: true });\n            this.refresh();\n        }\n    }\n    stop() {\n        if (this.started) {\n            this.mutationObserver.takeRecords();\n            this.mutationObserver.disconnect();\n            this.started = false;\n        }\n    }\n    refresh() {\n        if (this.started) {\n            for (const attributeName of this.knownAttributeNames) {\n                this.refreshAttribute(attributeName, null);\n            }\n        }\n    }\n    processMutations(mutations) {\n        if (this.started) {\n            for (const mutation of mutations) {\n                this.processMutation(mutation);\n            }\n        }\n    }\n    processMutation(mutation) {\n        const attributeName = mutation.attributeName;\n        if (attributeName) {\n            this.refreshAttribute(attributeName, mutation.oldValue);\n        }\n    }\n    refreshAttribute(attributeName, oldValue) {\n        const key = this.delegate.getStringMapKeyForAttribute(attributeName);\n        if (key != null) {\n            if (!this.stringMap.has(attributeName)) {\n                this.stringMapKeyAdded(key, attributeName);\n            }\n            const value = this.element.getAttribute(attributeName);\n            if (this.stringMap.get(attributeName) != value) {\n                this.stringMapValueChanged(value, key, oldValue);\n            }\n            if (value == null) {\n                const oldValue = this.stringMap.get(attributeName);\n                this.stringMap.delete(attributeName);\n                if (oldValue)\n                    this.stringMapKeyRemoved(key, attributeName, oldValue);\n            }\n            else {\n                this.stringMap.set(attributeName, value);\n            }\n        }\n    }\n    stringMapKeyAdded(key, attributeName) {\n        if (this.delegate.stringMapKeyAdded) {\n            this.delegate.stringMapKeyAdded(key, attributeName);\n        }\n    }\n    stringMapValueChanged(value, key, oldValue) {\n        if (this.delegate.stringMapValueChanged) {\n            this.delegate.stringMapValueChanged(value, key, oldValue);\n        }\n    }\n    stringMapKeyRemoved(key, attributeName, oldValue) {\n        if (this.delegate.stringMapKeyRemoved) {\n            this.delegate.stringMapKeyRemoved(key, attributeName, oldValue);\n        }\n    }\n    get knownAttributeNames() {\n        return Array.from(new Set(this.currentAttributeNames.concat(this.recordedAttributeNames)));\n    }\n    get currentAttributeNames() {\n        return Array.from(this.element.attributes).map((attribute) => attribute.name);\n    }\n    get recordedAttributeNames() {\n        return Array.from(this.stringMap.keys());\n    }\n}\n\nclass TokenListObserver {\n    constructor(element, attributeName, delegate) {\n        this.attributeObserver = new AttributeObserver(element, attributeName, this);\n        this.delegate = delegate;\n        this.tokensByElement = new Multimap();\n    }\n    get started() {\n        return this.attributeObserver.started;\n    }\n    start() {\n        this.attributeObserver.start();\n    }\n    pause(callback) {\n        this.attributeObserver.pause(callback);\n    }\n    stop() {\n        this.attributeObserver.stop();\n    }\n    refresh() {\n        this.attributeObserver.refresh();\n    }\n    get element() {\n        return this.attributeObserver.element;\n    }\n    get attributeName() {\n        return this.attributeObserver.attributeName;\n    }\n    elementMatchedAttribute(element) {\n        this.tokensMatched(this.readTokensForElement(element));\n    }\n    elementAttributeValueChanged(element) {\n        const [unmatchedTokens, matchedTokens] = this.refreshTokensForElement(element);\n        this.tokensUnmatched(unmatchedTokens);\n        this.tokensMatched(matchedTokens);\n    }\n    elementUnmatchedAttribute(element) {\n        this.tokensUnmatched(this.tokensByElement.getValuesForKey(element));\n    }\n    tokensMatched(tokens) {\n        tokens.forEach((token) => this.tokenMatched(token));\n    }\n    tokensUnmatched(tokens) {\n        tokens.forEach((token) => this.tokenUnmatched(token));\n    }\n    tokenMatched(token) {\n        this.delegate.tokenMatched(token);\n        this.tokensByElement.add(token.element, token);\n    }\n    tokenUnmatched(token) {\n        this.delegate.tokenUnmatched(token);\n        this.tokensByElement.delete(token.element, token);\n    }\n    refreshTokensForElement(element) {\n        const previousTokens = this.tokensByElement.getValuesForKey(element);\n        const currentTokens = this.readTokensForElement(element);\n        const firstDifferingIndex = zip(previousTokens, currentTokens).findIndex(([previousToken, currentToken]) => !tokensAreEqual(previousToken, currentToken));\n        if (firstDifferingIndex == -1) {\n            return [[], []];\n        }\n        else {\n            return [previousTokens.slice(firstDifferingIndex), currentTokens.slice(firstDifferingIndex)];\n        }\n    }\n    readTokensForElement(element) {\n        const attributeName = this.attributeName;\n        const tokenString = element.getAttribute(attributeName) || \"\";\n        return parseTokenString(tokenString, element, attributeName);\n    }\n}\nfunction parseTokenString(tokenString, element, attributeName) {\n    return tokenString\n        .trim()\n        .split(/\\s+/)\n        .filter((content) => content.length)\n        .map((content, index) => ({ element, attributeName, content, index }));\n}\nfunction zip(left, right) {\n    const length = Math.max(left.length, right.length);\n    return Array.from({ length }, (_, index) => [left[index], right[index]]);\n}\nfunction tokensAreEqual(left, right) {\n    return left && right && left.index == right.index && left.content == right.content;\n}\n\nclass ValueListObserver {\n    constructor(element, attributeName, delegate) {\n        this.tokenListObserver = new TokenListObserver(element, attributeName, this);\n        this.delegate = delegate;\n        this.parseResultsByToken = new WeakMap();\n        this.valuesByTokenByElement = new WeakMap();\n    }\n    get started() {\n        return this.tokenListObserver.started;\n    }\n    start() {\n        this.tokenListObserver.start();\n    }\n    stop() {\n        this.tokenListObserver.stop();\n    }\n    refresh() {\n        this.tokenListObserver.refresh();\n    }\n    get element() {\n        return this.tokenListObserver.element;\n    }\n    get attributeName() {\n        return this.tokenListObserver.attributeName;\n    }\n    tokenMatched(token) {\n        const { element } = token;\n        const { value } = this.fetchParseResultForToken(token);\n        if (value) {\n            this.fetchValuesByTokenForElement(element).set(token, value);\n            this.delegate.elementMatchedValue(element, value);\n        }\n    }\n    tokenUnmatched(token) {\n        const { element } = token;\n        const { value } = this.fetchParseResultForToken(token);\n        if (value) {\n            this.fetchValuesByTokenForElement(element).delete(token);\n            this.delegate.elementUnmatchedValue(element, value);\n        }\n    }\n    fetchParseResultForToken(token) {\n        let parseResult = this.parseResultsByToken.get(token);\n        if (!parseResult) {\n            parseResult = this.parseToken(token);\n            this.parseResultsByToken.set(token, parseResult);\n        }\n        return parseResult;\n    }\n    fetchValuesByTokenForElement(element) {\n        let valuesByToken = this.valuesByTokenByElement.get(element);\n        if (!valuesByToken) {\n            valuesByToken = new Map();\n            this.valuesByTokenByElement.set(element, valuesByToken);\n        }\n        return valuesByToken;\n    }\n    parseToken(token) {\n        try {\n            const value = this.delegate.parseValueForToken(token);\n            return { value };\n        }\n        catch (error) {\n            return { error };\n        }\n    }\n}\n\nclass BindingObserver {\n    constructor(context, delegate) {\n        this.context = context;\n        this.delegate = delegate;\n        this.bindingsByAction = new Map();\n    }\n    start() {\n        if (!this.valueListObserver) {\n            this.valueListObserver = new ValueListObserver(this.element, this.actionAttribute, this);\n            this.valueListObserver.start();\n        }\n    }\n    stop() {\n        if (this.valueListObserver) {\n            this.valueListObserver.stop();\n            delete this.valueListObserver;\n            this.disconnectAllActions();\n        }\n    }\n    get element() {\n        return this.context.element;\n    }\n    get identifier() {\n        return this.context.identifier;\n    }\n    get actionAttribute() {\n        return this.schema.actionAttribute;\n    }\n    get schema() {\n        return this.context.schema;\n    }\n    get bindings() {\n        return Array.from(this.bindingsByAction.values());\n    }\n    connectAction(action) {\n        const binding = new Binding(this.context, action);\n        this.bindingsByAction.set(action, binding);\n        this.delegate.bindingConnected(binding);\n    }\n    disconnectAction(action) {\n        const binding = this.bindingsByAction.get(action);\n        if (binding) {\n            this.bindingsByAction.delete(action);\n            this.delegate.bindingDisconnected(binding);\n        }\n    }\n    disconnectAllActions() {\n        this.bindings.forEach((binding) => this.delegate.bindingDisconnected(binding, true));\n        this.bindingsByAction.clear();\n    }\n    parseValueForToken(token) {\n        const action = Action.forToken(token, this.schema);\n        if (action.identifier == this.identifier) {\n            return action;\n        }\n    }\n    elementMatchedValue(element, action) {\n        this.connectAction(action);\n    }\n    elementUnmatchedValue(element, action) {\n        this.disconnectAction(action);\n    }\n}\n\nclass ValueObserver {\n    constructor(context, receiver) {\n        this.context = context;\n        this.receiver = receiver;\n        this.stringMapObserver = new StringMapObserver(this.element, this);\n        this.valueDescriptorMap = this.controller.valueDescriptorMap;\n    }\n    start() {\n        this.stringMapObserver.start();\n        this.invokeChangedCallbacksForDefaultValues();\n    }\n    stop() {\n        this.stringMapObserver.stop();\n    }\n    get element() {\n        return this.context.element;\n    }\n    get controller() {\n        return this.context.controller;\n    }\n    getStringMapKeyForAttribute(attributeName) {\n        if (attributeName in this.valueDescriptorMap) {\n            return this.valueDescriptorMap[attributeName].name;\n        }\n    }\n    stringMapKeyAdded(key, attributeName) {\n        const descriptor = this.valueDescriptorMap[attributeName];\n        if (!this.hasValue(key)) {\n            this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), descriptor.writer(descriptor.defaultValue));\n        }\n    }\n    stringMapValueChanged(value, name, oldValue) {\n        const descriptor = this.valueDescriptorNameMap[name];\n        if (value === null)\n            return;\n        if (oldValue === null) {\n            oldValue = descriptor.writer(descriptor.defaultValue);\n        }\n        this.invokeChangedCallback(name, value, oldValue);\n    }\n    stringMapKeyRemoved(key, attributeName, oldValue) {\n        const descriptor = this.valueDescriptorNameMap[key];\n        if (this.hasValue(key)) {\n            this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), oldValue);\n        }\n        else {\n            this.invokeChangedCallback(key, descriptor.writer(descriptor.defaultValue), oldValue);\n        }\n    }\n    invokeChangedCallbacksForDefaultValues() {\n        for (const { key, name, defaultValue, writer } of this.valueDescriptors) {\n            if (defaultValue != undefined && !this.controller.data.has(key)) {\n                this.invokeChangedCallback(name, writer(defaultValue), undefined);\n            }\n        }\n    }\n    invokeChangedCallback(name, rawValue, rawOldValue) {\n        const changedMethodName = `${name}Changed`;\n        const changedMethod = this.receiver[changedMethodName];\n        if (typeof changedMethod == \"function\") {\n            const descriptor = this.valueDescriptorNameMap[name];\n            try {\n                const value = descriptor.reader(rawValue);\n                let oldValue = rawOldValue;\n                if (rawOldValue) {\n                    oldValue = descriptor.reader(rawOldValue);\n                }\n                changedMethod.call(this.receiver, value, oldValue);\n            }\n            catch (error) {\n                if (error instanceof TypeError) {\n                    error.message = `Stimulus Value \"${this.context.identifier}.${descriptor.name}\" - ${error.message}`;\n                }\n                throw error;\n            }\n        }\n    }\n    get valueDescriptors() {\n        const { valueDescriptorMap } = this;\n        return Object.keys(valueDescriptorMap).map((key) => valueDescriptorMap[key]);\n    }\n    get valueDescriptorNameMap() {\n        const descriptors = {};\n        Object.keys(this.valueDescriptorMap).forEach((key) => {\n            const descriptor = this.valueDescriptorMap[key];\n            descriptors[descriptor.name] = descriptor;\n        });\n        return descriptors;\n    }\n    hasValue(attributeName) {\n        const descriptor = this.valueDescriptorNameMap[attributeName];\n        const hasMethodName = `has${capitalize(descriptor.name)}`;\n        return this.receiver[hasMethodName];\n    }\n}\n\nclass TargetObserver {\n    constructor(context, delegate) {\n        this.context = context;\n        this.delegate = delegate;\n        this.targetsByName = new Multimap();\n    }\n    start() {\n        if (!this.tokenListObserver) {\n            this.tokenListObserver = new TokenListObserver(this.element, this.attributeName, this);\n            this.tokenListObserver.start();\n        }\n    }\n    stop() {\n        if (this.tokenListObserver) {\n            this.disconnectAllTargets();\n            this.tokenListObserver.stop();\n            delete this.tokenListObserver;\n        }\n    }\n    tokenMatched({ element, content: name }) {\n        if (this.scope.containsElement(element)) {\n            this.connectTarget(element, name);\n        }\n    }\n    tokenUnmatched({ element, content: name }) {\n        this.disconnectTarget(element, name);\n    }\n    connectTarget(element, name) {\n        var _a;\n        if (!this.targetsByName.has(name, element)) {\n            this.targetsByName.add(name, element);\n            (_a = this.tokenListObserver) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.targetConnected(element, name));\n        }\n    }\n    disconnectTarget(element, name) {\n        var _a;\n        if (this.targetsByName.has(name, element)) {\n            this.targetsByName.delete(name, element);\n            (_a = this.tokenListObserver) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.targetDisconnected(element, name));\n        }\n    }\n    disconnectAllTargets() {\n        for (const name of this.targetsByName.keys) {\n            for (const element of this.targetsByName.getValuesForKey(name)) {\n                this.disconnectTarget(element, name);\n            }\n        }\n    }\n    get attributeName() {\n        return `data-${this.context.identifier}-target`;\n    }\n    get element() {\n        return this.context.element;\n    }\n    get scope() {\n        return this.context.scope;\n    }\n}\n\nfunction readInheritableStaticArrayValues(constructor, propertyName) {\n    const ancestors = getAncestorsForConstructor(constructor);\n    return Array.from(ancestors.reduce((values, constructor) => {\n        getOwnStaticArrayValues(constructor, propertyName).forEach((name) => values.add(name));\n        return values;\n    }, new Set()));\n}\nfunction readInheritableStaticObjectPairs(constructor, propertyName) {\n    const ancestors = getAncestorsForConstructor(constructor);\n    return ancestors.reduce((pairs, constructor) => {\n        pairs.push(...getOwnStaticObjectPairs(constructor, propertyName));\n        return pairs;\n    }, []);\n}\nfunction getAncestorsForConstructor(constructor) {\n    const ancestors = [];\n    while (constructor) {\n        ancestors.push(constructor);\n        constructor = Object.getPrototypeOf(constructor);\n    }\n    return ancestors.reverse();\n}\nfunction getOwnStaticArrayValues(constructor, propertyName) {\n    const definition = constructor[propertyName];\n    return Array.isArray(definition) ? definition : [];\n}\nfunction getOwnStaticObjectPairs(constructor, propertyName) {\n    const definition = constructor[propertyName];\n    return definition ? Object.keys(definition).map((key) => [key, definition[key]]) : [];\n}\n\nclass OutletObserver {\n    constructor(context, delegate) {\n        this.started = false;\n        this.context = context;\n        this.delegate = delegate;\n        this.outletsByName = new Multimap();\n        this.outletElementsByName = new Multimap();\n        this.selectorObserverMap = new Map();\n        this.attributeObserverMap = new Map();\n    }\n    start() {\n        if (!this.started) {\n            this.outletDefinitions.forEach((outletName) => {\n                this.setupSelectorObserverForOutlet(outletName);\n                this.setupAttributeObserverForOutlet(outletName);\n            });\n            this.started = true;\n            this.dependentContexts.forEach((context) => context.refresh());\n        }\n    }\n    refresh() {\n        this.selectorObserverMap.forEach((observer) => observer.refresh());\n        this.attributeObserverMap.forEach((observer) => observer.refresh());\n    }\n    stop() {\n        if (this.started) {\n            this.started = false;\n            this.disconnectAllOutlets();\n            this.stopSelectorObservers();\n            this.stopAttributeObservers();\n        }\n    }\n    stopSelectorObservers() {\n        if (this.selectorObserverMap.size > 0) {\n            this.selectorObserverMap.forEach((observer) => observer.stop());\n            this.selectorObserverMap.clear();\n        }\n    }\n    stopAttributeObservers() {\n        if (this.attributeObserverMap.size > 0) {\n            this.attributeObserverMap.forEach((observer) => observer.stop());\n            this.attributeObserverMap.clear();\n        }\n    }\n    selectorMatched(element, _selector, { outletName }) {\n        const outlet = this.getOutlet(element, outletName);\n        if (outlet) {\n            this.connectOutlet(outlet, element, outletName);\n        }\n    }\n    selectorUnmatched(element, _selector, { outletName }) {\n        const outlet = this.getOutletFromMap(element, outletName);\n        if (outlet) {\n            this.disconnectOutlet(outlet, element, outletName);\n        }\n    }\n    selectorMatchElement(element, { outletName }) {\n        const selector = this.selector(outletName);\n        const hasOutlet = this.hasOutlet(element, outletName);\n        const hasOutletController = element.matches(`[${this.schema.controllerAttribute}~=${outletName}]`);\n        if (selector) {\n            return hasOutlet && hasOutletController && element.matches(selector);\n        }\n        else {\n            return false;\n        }\n    }\n    elementMatchedAttribute(_element, attributeName) {\n        const outletName = this.getOutletNameFromOutletAttributeName(attributeName);\n        if (outletName) {\n            this.updateSelectorObserverForOutlet(outletName);\n        }\n    }\n    elementAttributeValueChanged(_element, attributeName) {\n        const outletName = this.getOutletNameFromOutletAttributeName(attributeName);\n        if (outletName) {\n            this.updateSelectorObserverForOutlet(outletName);\n        }\n    }\n    elementUnmatchedAttribute(_element, attributeName) {\n        const outletName = this.getOutletNameFromOutletAttributeName(attributeName);\n        if (outletName) {\n            this.updateSelectorObserverForOutlet(outletName);\n        }\n    }\n    connectOutlet(outlet, element, outletName) {\n        var _a;\n        if (!this.outletElementsByName.has(outletName, element)) {\n            this.outletsByName.add(outletName, outlet);\n            this.outletElementsByName.add(outletName, element);\n            (_a = this.selectorObserverMap.get(outletName)) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.outletConnected(outlet, element, outletName));\n        }\n    }\n    disconnectOutlet(outlet, element, outletName) {\n        var _a;\n        if (this.outletElementsByName.has(outletName, element)) {\n            this.outletsByName.delete(outletName, outlet);\n            this.outletElementsByName.delete(outletName, element);\n            (_a = this.selectorObserverMap\n                .get(outletName)) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.outletDisconnected(outlet, element, outletName));\n        }\n    }\n    disconnectAllOutlets() {\n        for (const outletName of this.outletElementsByName.keys) {\n            for (const element of this.outletElementsByName.getValuesForKey(outletName)) {\n                for (const outlet of this.outletsByName.getValuesForKey(outletName)) {\n                    this.disconnectOutlet(outlet, element, outletName);\n                }\n            }\n        }\n    }\n    updateSelectorObserverForOutlet(outletName) {\n        const observer = this.selectorObserverMap.get(outletName);\n        if (observer) {\n            observer.selector = this.selector(outletName);\n        }\n    }\n    setupSelectorObserverForOutlet(outletName) {\n        const selector = this.selector(outletName);\n        const selectorObserver = new SelectorObserver(document.body, selector, this, { outletName });\n        this.selectorObserverMap.set(outletName, selectorObserver);\n        selectorObserver.start();\n    }\n    setupAttributeObserverForOutlet(outletName) {\n        const attributeName = this.attributeNameForOutletName(outletName);\n        const attributeObserver = new AttributeObserver(this.scope.element, attributeName, this);\n        this.attributeObserverMap.set(outletName, attributeObserver);\n        attributeObserver.start();\n    }\n    selector(outletName) {\n        return this.scope.outlets.getSelectorForOutletName(outletName);\n    }\n    attributeNameForOutletName(outletName) {\n        return this.scope.schema.outletAttributeForScope(this.identifier, outletName);\n    }\n    getOutletNameFromOutletAttributeName(attributeName) {\n        return this.outletDefinitions.find((outletName) => this.attributeNameForOutletName(outletName) === attributeName);\n    }\n    get outletDependencies() {\n        const dependencies = new Multimap();\n        this.router.modules.forEach((module) => {\n            const constructor = module.definition.controllerConstructor;\n            const outlets = readInheritableStaticArrayValues(constructor, \"outlets\");\n            outlets.forEach((outlet) => dependencies.add(outlet, module.identifier));\n        });\n        return dependencies;\n    }\n    get outletDefinitions() {\n        return this.outletDependencies.getKeysForValue(this.identifier);\n    }\n    get dependentControllerIdentifiers() {\n        return this.outletDependencies.getValuesForKey(this.identifier);\n    }\n    get dependentContexts() {\n        const identifiers = this.dependentControllerIdentifiers;\n        return this.router.contexts.filter((context) => identifiers.includes(context.identifier));\n    }\n    hasOutlet(element, outletName) {\n        return !!this.getOutlet(element, outletName) || !!this.getOutletFromMap(element, outletName);\n    }\n    getOutlet(element, outletName) {\n        return this.application.getControllerForElementAndIdentifier(element, outletName);\n    }\n    getOutletFromMap(element, outletName) {\n        return this.outletsByName.getValuesForKey(outletName).find((outlet) => outlet.element === element);\n    }\n    get scope() {\n        return this.context.scope;\n    }\n    get schema() {\n        return this.context.schema;\n    }\n    get identifier() {\n        return this.context.identifier;\n    }\n    get application() {\n        return this.context.application;\n    }\n    get router() {\n        return this.application.router;\n    }\n}\n\nclass Context {\n    constructor(module, scope) {\n        this.logDebugActivity = (functionName, detail = {}) => {\n            const { identifier, controller, element } = this;\n            detail = Object.assign({ identifier, controller, element }, detail);\n            this.application.logDebugActivity(this.identifier, functionName, detail);\n        };\n        this.module = module;\n        this.scope = scope;\n        this.controller = new module.controllerConstructor(this);\n        this.bindingObserver = new BindingObserver(this, this.dispatcher);\n        this.valueObserver = new ValueObserver(this, this.controller);\n        this.targetObserver = new TargetObserver(this, this);\n        this.outletObserver = new OutletObserver(this, this);\n        try {\n            this.controller.initialize();\n            this.logDebugActivity(\"initialize\");\n        }\n        catch (error) {\n            this.handleError(error, \"initializing controller\");\n        }\n    }\n    connect() {\n        this.bindingObserver.start();\n        this.valueObserver.start();\n        this.targetObserver.start();\n        this.outletObserver.start();\n        try {\n            this.controller.connect();\n            this.logDebugActivity(\"connect\");\n        }\n        catch (error) {\n            this.handleError(error, \"connecting controller\");\n        }\n    }\n    refresh() {\n        this.outletObserver.refresh();\n    }\n    disconnect() {\n        try {\n            this.controller.disconnect();\n            this.logDebugActivity(\"disconnect\");\n        }\n        catch (error) {\n            this.handleError(error, \"disconnecting controller\");\n        }\n        this.outletObserver.stop();\n        this.targetObserver.stop();\n        this.valueObserver.stop();\n        this.bindingObserver.stop();\n    }\n    get application() {\n        return this.module.application;\n    }\n    get identifier() {\n        return this.module.identifier;\n    }\n    get schema() {\n        return this.application.schema;\n    }\n    get dispatcher() {\n        return this.application.dispatcher;\n    }\n    get element() {\n        return this.scope.element;\n    }\n    get parentElement() {\n        return this.element.parentElement;\n    }\n    handleError(error, message, detail = {}) {\n        const { identifier, controller, element } = this;\n        detail = Object.assign({ identifier, controller, element }, detail);\n        this.application.handleError(error, `Error ${message}`, detail);\n    }\n    targetConnected(element, name) {\n        this.invokeControllerMethod(`${name}TargetConnected`, element);\n    }\n    targetDisconnected(element, name) {\n        this.invokeControllerMethod(`${name}TargetDisconnected`, element);\n    }\n    outletConnected(outlet, element, name) {\n        this.invokeControllerMethod(`${namespaceCamelize(name)}OutletConnected`, outlet, element);\n    }\n    outletDisconnected(outlet, element, name) {\n        this.invokeControllerMethod(`${namespaceCamelize(name)}OutletDisconnected`, outlet, element);\n    }\n    invokeControllerMethod(methodName, ...args) {\n        const controller = this.controller;\n        if (typeof controller[methodName] == \"function\") {\n            controller[methodName](...args);\n        }\n    }\n}\n\nfunction bless(constructor) {\n    return shadow(constructor, getBlessedProperties(constructor));\n}\nfunction shadow(constructor, properties) {\n    const shadowConstructor = extend(constructor);\n    const shadowProperties = getShadowProperties(constructor.prototype, properties);\n    Object.defineProperties(shadowConstructor.prototype, shadowProperties);\n    return shadowConstructor;\n}\nfunction getBlessedProperties(constructor) {\n    const blessings = readInheritableStaticArrayValues(constructor, \"blessings\");\n    return blessings.reduce((blessedProperties, blessing) => {\n        const properties = blessing(constructor);\n        for (const key in properties) {\n            const descriptor = blessedProperties[key] || {};\n            blessedProperties[key] = Object.assign(descriptor, properties[key]);\n        }\n        return blessedProperties;\n    }, {});\n}\nfunction getShadowProperties(prototype, properties) {\n    return getOwnKeys(properties).reduce((shadowProperties, key) => {\n        const descriptor = getShadowedDescriptor(prototype, properties, key);\n        if (descriptor) {\n            Object.assign(shadowProperties, { [key]: descriptor });\n        }\n        return shadowProperties;\n    }, {});\n}\nfunction getShadowedDescriptor(prototype, properties, key) {\n    const shadowingDescriptor = Object.getOwnPropertyDescriptor(prototype, key);\n    const shadowedByValue = shadowingDescriptor && \"value\" in shadowingDescriptor;\n    if (!shadowedByValue) {\n        const descriptor = Object.getOwnPropertyDescriptor(properties, key).value;\n        if (shadowingDescriptor) {\n            descriptor.get = shadowingDescriptor.get || descriptor.get;\n            descriptor.set = shadowingDescriptor.set || descriptor.set;\n        }\n        return descriptor;\n    }\n}\nconst getOwnKeys = (() => {\n    if (typeof Object.getOwnPropertySymbols == \"function\") {\n        return (object) => [...Object.getOwnPropertyNames(object), ...Object.getOwnPropertySymbols(object)];\n    }\n    else {\n        return Object.getOwnPropertyNames;\n    }\n})();\nconst extend = (() => {\n    function extendWithReflect(constructor) {\n        function extended() {\n            return Reflect.construct(constructor, arguments, new.target);\n        }\n        extended.prototype = Object.create(constructor.prototype, {\n            constructor: { value: extended },\n        });\n        Reflect.setPrototypeOf(extended, constructor);\n        return extended;\n    }\n    function testReflectExtension() {\n        const a = function () {\n            this.a.call(this);\n        };\n        const b = extendWithReflect(a);\n        b.prototype.a = function () { };\n        return new b();\n    }\n    try {\n        testReflectExtension();\n        return extendWithReflect;\n    }\n    catch (error) {\n        return (constructor) => class extended extends constructor {\n        };\n    }\n})();\n\nfunction blessDefinition(definition) {\n    return {\n        identifier: definition.identifier,\n        controllerConstructor: bless(definition.controllerConstructor),\n    };\n}\n\nclass Module {\n    constructor(application, definition) {\n        this.application = application;\n        this.definition = blessDefinition(definition);\n        this.contextsByScope = new WeakMap();\n        this.connectedContexts = new Set();\n    }\n    get identifier() {\n        return this.definition.identifier;\n    }\n    get controllerConstructor() {\n        return this.definition.controllerConstructor;\n    }\n    get contexts() {\n        return Array.from(this.connectedContexts);\n    }\n    connectContextForScope(scope) {\n        const context = this.fetchContextForScope(scope);\n        this.connectedContexts.add(context);\n        context.connect();\n    }\n    disconnectContextForScope(scope) {\n        const context = this.contextsByScope.get(scope);\n        if (context) {\n            this.connectedContexts.delete(context);\n            context.disconnect();\n        }\n    }\n    fetchContextForScope(scope) {\n        let context = this.contextsByScope.get(scope);\n        if (!context) {\n            context = new Context(this, scope);\n            this.contextsByScope.set(scope, context);\n        }\n        return context;\n    }\n}\n\nclass ClassMap {\n    constructor(scope) {\n        this.scope = scope;\n    }\n    has(name) {\n        return this.data.has(this.getDataKey(name));\n    }\n    get(name) {\n        return this.getAll(name)[0];\n    }\n    getAll(name) {\n        const tokenString = this.data.get(this.getDataKey(name)) || \"\";\n        return tokenize(tokenString);\n    }\n    getAttributeName(name) {\n        return this.data.getAttributeNameForKey(this.getDataKey(name));\n    }\n    getDataKey(name) {\n        return `${name}-class`;\n    }\n    get data() {\n        return this.scope.data;\n    }\n}\n\nclass DataMap {\n    constructor(scope) {\n        this.scope = scope;\n    }\n    get element() {\n        return this.scope.element;\n    }\n    get identifier() {\n        return this.scope.identifier;\n    }\n    get(key) {\n        const name = this.getAttributeNameForKey(key);\n        return this.element.getAttribute(name);\n    }\n    set(key, value) {\n        const name = this.getAttributeNameForKey(key);\n        this.element.setAttribute(name, value);\n        return this.get(key);\n    }\n    has(key) {\n        const name = this.getAttributeNameForKey(key);\n        return this.element.hasAttribute(name);\n    }\n    delete(key) {\n        if (this.has(key)) {\n            const name = this.getAttributeNameForKey(key);\n            this.element.removeAttribute(name);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    getAttributeNameForKey(key) {\n        return `data-${this.identifier}-${dasherize(key)}`;\n    }\n}\n\nclass Guide {\n    constructor(logger) {\n        this.warnedKeysByObject = new WeakMap();\n        this.logger = logger;\n    }\n    warn(object, key, message) {\n        let warnedKeys = this.warnedKeysByObject.get(object);\n        if (!warnedKeys) {\n            warnedKeys = new Set();\n            this.warnedKeysByObject.set(object, warnedKeys);\n        }\n        if (!warnedKeys.has(key)) {\n            warnedKeys.add(key);\n            this.logger.warn(message, object);\n        }\n    }\n}\n\nfunction attributeValueContainsToken(attributeName, token) {\n    return `[${attributeName}~=\"${token}\"]`;\n}\n\nclass TargetSet {\n    constructor(scope) {\n        this.scope = scope;\n    }\n    get element() {\n        return this.scope.element;\n    }\n    get identifier() {\n        return this.scope.identifier;\n    }\n    get schema() {\n        return this.scope.schema;\n    }\n    has(targetName) {\n        return this.find(targetName) != null;\n    }\n    find(...targetNames) {\n        return targetNames.reduce((target, targetName) => target || this.findTarget(targetName) || this.findLegacyTarget(targetName), undefined);\n    }\n    findAll(...targetNames) {\n        return targetNames.reduce((targets, targetName) => [\n            ...targets,\n            ...this.findAllTargets(targetName),\n            ...this.findAllLegacyTargets(targetName),\n        ], []);\n    }\n    findTarget(targetName) {\n        const selector = this.getSelectorForTargetName(targetName);\n        return this.scope.findElement(selector);\n    }\n    findAllTargets(targetName) {\n        const selector = this.getSelectorForTargetName(targetName);\n        return this.scope.findAllElements(selector);\n    }\n    getSelectorForTargetName(targetName) {\n        const attributeName = this.schema.targetAttributeForScope(this.identifier);\n        return attributeValueContainsToken(attributeName, targetName);\n    }\n    findLegacyTarget(targetName) {\n        const selector = this.getLegacySelectorForTargetName(targetName);\n        return this.deprecate(this.scope.findElement(selector), targetName);\n    }\n    findAllLegacyTargets(targetName) {\n        const selector = this.getLegacySelectorForTargetName(targetName);\n        return this.scope.findAllElements(selector).map((element) => this.deprecate(element, targetName));\n    }\n    getLegacySelectorForTargetName(targetName) {\n        const targetDescriptor = `${this.identifier}.${targetName}`;\n        return attributeValueContainsToken(this.schema.targetAttribute, targetDescriptor);\n    }\n    deprecate(element, targetName) {\n        if (element) {\n            const { identifier } = this;\n            const attributeName = this.schema.targetAttribute;\n            const revisedAttributeName = this.schema.targetAttributeForScope(identifier);\n            this.guide.warn(element, `target:${targetName}`, `Please replace ${attributeName}=\"${identifier}.${targetName}\" with ${revisedAttributeName}=\"${targetName}\". ` +\n                `The ${attributeName} attribute is deprecated and will be removed in a future version of Stimulus.`);\n        }\n        return element;\n    }\n    get guide() {\n        return this.scope.guide;\n    }\n}\n\nclass OutletSet {\n    constructor(scope, controllerElement) {\n        this.scope = scope;\n        this.controllerElement = controllerElement;\n    }\n    get element() {\n        return this.scope.element;\n    }\n    get identifier() {\n        return this.scope.identifier;\n    }\n    get schema() {\n        return this.scope.schema;\n    }\n    has(outletName) {\n        return this.find(outletName) != null;\n    }\n    find(...outletNames) {\n        return outletNames.reduce((outlet, outletName) => outlet || this.findOutlet(outletName), undefined);\n    }\n    findAll(...outletNames) {\n        return outletNames.reduce((outlets, outletName) => [...outlets, ...this.findAllOutlets(outletName)], []);\n    }\n    getSelectorForOutletName(outletName) {\n        const attributeName = this.schema.outletAttributeForScope(this.identifier, outletName);\n        return this.controllerElement.getAttribute(attributeName);\n    }\n    findOutlet(outletName) {\n        const selector = this.getSelectorForOutletName(outletName);\n        if (selector)\n            return this.findElement(selector, outletName);\n    }\n    findAllOutlets(outletName) {\n        const selector = this.getSelectorForOutletName(outletName);\n        return selector ? this.findAllElements(selector, outletName) : [];\n    }\n    findElement(selector, outletName) {\n        const elements = this.scope.queryElements(selector);\n        return elements.filter((element) => this.matchesElement(element, selector, outletName))[0];\n    }\n    findAllElements(selector, outletName) {\n        const elements = this.scope.queryElements(selector);\n        return elements.filter((element) => this.matchesElement(element, selector, outletName));\n    }\n    matchesElement(element, selector, outletName) {\n        const controllerAttribute = element.getAttribute(this.scope.schema.controllerAttribute) || \"\";\n        return element.matches(selector) && controllerAttribute.split(\" \").includes(outletName);\n    }\n}\n\nclass Scope {\n    constructor(schema, element, identifier, logger) {\n        this.targets = new TargetSet(this);\n        this.classes = new ClassMap(this);\n        this.data = new DataMap(this);\n        this.containsElement = (element) => {\n            return element.closest(this.controllerSelector) === this.element;\n        };\n        this.schema = schema;\n        this.element = element;\n        this.identifier = identifier;\n        this.guide = new Guide(logger);\n        this.outlets = new OutletSet(this.documentScope, element);\n    }\n    findElement(selector) {\n        return this.element.matches(selector) ? this.element : this.queryElements(selector).find(this.containsElement);\n    }\n    findAllElements(selector) {\n        return [\n            ...(this.element.matches(selector) ? [this.element] : []),\n            ...this.queryElements(selector).filter(this.containsElement),\n        ];\n    }\n    queryElements(selector) {\n        return Array.from(this.element.querySelectorAll(selector));\n    }\n    get controllerSelector() {\n        return attributeValueContainsToken(this.schema.controllerAttribute, this.identifier);\n    }\n    get isDocumentScope() {\n        return this.element === document.documentElement;\n    }\n    get documentScope() {\n        return this.isDocumentScope\n            ? this\n            : new Scope(this.schema, document.documentElement, this.identifier, this.guide.logger);\n    }\n}\n\nclass ScopeObserver {\n    constructor(element, schema, delegate) {\n        this.element = element;\n        this.schema = schema;\n        this.delegate = delegate;\n        this.valueListObserver = new ValueListObserver(this.element, this.controllerAttribute, this);\n        this.scopesByIdentifierByElement = new WeakMap();\n        this.scopeReferenceCounts = new WeakMap();\n    }\n    start() {\n        this.valueListObserver.start();\n    }\n    stop() {\n        this.valueListObserver.stop();\n    }\n    get controllerAttribute() {\n        return this.schema.controllerAttribute;\n    }\n    parseValueForToken(token) {\n        const { element, content: identifier } = token;\n        return this.parseValueForElementAndIdentifier(element, identifier);\n    }\n    parseValueForElementAndIdentifier(element, identifier) {\n        const scopesByIdentifier = this.fetchScopesByIdentifierForElement(element);\n        let scope = scopesByIdentifier.get(identifier);\n        if (!scope) {\n            scope = this.delegate.createScopeForElementAndIdentifier(element, identifier);\n            scopesByIdentifier.set(identifier, scope);\n        }\n        return scope;\n    }\n    elementMatchedValue(element, value) {\n        const referenceCount = (this.scopeReferenceCounts.get(value) || 0) + 1;\n        this.scopeReferenceCounts.set(value, referenceCount);\n        if (referenceCount == 1) {\n            this.delegate.scopeConnected(value);\n        }\n    }\n    elementUnmatchedValue(element, value) {\n        const referenceCount = this.scopeReferenceCounts.get(value);\n        if (referenceCount) {\n            this.scopeReferenceCounts.set(value, referenceCount - 1);\n            if (referenceCount == 1) {\n                this.delegate.scopeDisconnected(value);\n            }\n        }\n    }\n    fetchScopesByIdentifierForElement(element) {\n        let scopesByIdentifier = this.scopesByIdentifierByElement.get(element);\n        if (!scopesByIdentifier) {\n            scopesByIdentifier = new Map();\n            this.scopesByIdentifierByElement.set(element, scopesByIdentifier);\n        }\n        return scopesByIdentifier;\n    }\n}\n\nclass Router {\n    constructor(application) {\n        this.application = application;\n        this.scopeObserver = new ScopeObserver(this.element, this.schema, this);\n        this.scopesByIdentifier = new Multimap();\n        this.modulesByIdentifier = new Map();\n    }\n    get element() {\n        return this.application.element;\n    }\n    get schema() {\n        return this.application.schema;\n    }\n    get logger() {\n        return this.application.logger;\n    }\n    get controllerAttribute() {\n        return this.schema.controllerAttribute;\n    }\n    get modules() {\n        return Array.from(this.modulesByIdentifier.values());\n    }\n    get contexts() {\n        return this.modules.reduce((contexts, module) => contexts.concat(module.contexts), []);\n    }\n    start() {\n        this.scopeObserver.start();\n    }\n    stop() {\n        this.scopeObserver.stop();\n    }\n    loadDefinition(definition) {\n        this.unloadIdentifier(definition.identifier);\n        const module = new Module(this.application, definition);\n        this.connectModule(module);\n        const afterLoad = definition.controllerConstructor.afterLoad;\n        if (afterLoad) {\n            afterLoad.call(definition.controllerConstructor, definition.identifier, this.application);\n        }\n    }\n    unloadIdentifier(identifier) {\n        const module = this.modulesByIdentifier.get(identifier);\n        if (module) {\n            this.disconnectModule(module);\n        }\n    }\n    getContextForElementAndIdentifier(element, identifier) {\n        const module = this.modulesByIdentifier.get(identifier);\n        if (module) {\n            return module.contexts.find((context) => context.element == element);\n        }\n    }\n    proposeToConnectScopeForElementAndIdentifier(element, identifier) {\n        const scope = this.scopeObserver.parseValueForElementAndIdentifier(element, identifier);\n        if (scope) {\n            this.scopeObserver.elementMatchedValue(scope.element, scope);\n        }\n        else {\n            console.error(`Couldn't find or create scope for identifier: \"${identifier}\" and element:`, element);\n        }\n    }\n    handleError(error, message, detail) {\n        this.application.handleError(error, message, detail);\n    }\n    createScopeForElementAndIdentifier(element, identifier) {\n        return new Scope(this.schema, element, identifier, this.logger);\n    }\n    scopeConnected(scope) {\n        this.scopesByIdentifier.add(scope.identifier, scope);\n        const module = this.modulesByIdentifier.get(scope.identifier);\n        if (module) {\n            module.connectContextForScope(scope);\n        }\n    }\n    scopeDisconnected(scope) {\n        this.scopesByIdentifier.delete(scope.identifier, scope);\n        const module = this.modulesByIdentifier.get(scope.identifier);\n        if (module) {\n            module.disconnectContextForScope(scope);\n        }\n    }\n    connectModule(module) {\n        this.modulesByIdentifier.set(module.identifier, module);\n        const scopes = this.scopesByIdentifier.getValuesForKey(module.identifier);\n        scopes.forEach((scope) => module.connectContextForScope(scope));\n    }\n    disconnectModule(module) {\n        this.modulesByIdentifier.delete(module.identifier);\n        const scopes = this.scopesByIdentifier.getValuesForKey(module.identifier);\n        scopes.forEach((scope) => module.disconnectContextForScope(scope));\n    }\n}\n\nconst defaultSchema = {\n    controllerAttribute: \"data-controller\",\n    actionAttribute: \"data-action\",\n    targetAttribute: \"data-target\",\n    targetAttributeForScope: (identifier) => `data-${identifier}-target`,\n    outletAttributeForScope: (identifier, outlet) => `data-${identifier}-${outlet}-outlet`,\n    keyMappings: Object.assign(Object.assign({ enter: \"Enter\", tab: \"Tab\", esc: \"Escape\", space: \" \", up: \"ArrowUp\", down: \"ArrowDown\", left: \"ArrowLeft\", right: \"ArrowRight\", home: \"Home\", end: \"End\", page_up: \"PageUp\", page_down: \"PageDown\" }, objectFromEntries(\"abcdefghijklmnopqrstuvwxyz\".split(\"\").map((c) => [c, c]))), objectFromEntries(\"0123456789\".split(\"\").map((n) => [n, n]))),\n};\nfunction objectFromEntries(array) {\n    return array.reduce((memo, [k, v]) => (Object.assign(Object.assign({}, memo), { [k]: v })), {});\n}\n\nclass Application {\n    constructor(element = document.documentElement, schema = defaultSchema) {\n        this.logger = console;\n        this.debug = false;\n        this.logDebugActivity = (identifier, functionName, detail = {}) => {\n            if (this.debug) {\n                this.logFormattedMessage(identifier, functionName, detail);\n            }\n        };\n        this.element = element;\n        this.schema = schema;\n        this.dispatcher = new Dispatcher(this);\n        this.router = new Router(this);\n        this.actionDescriptorFilters = Object.assign({}, defaultActionDescriptorFilters);\n    }\n    static start(element, schema) {\n        const application = new this(element, schema);\n        application.start();\n        return application;\n    }\n    async start() {\n        await domReady();\n        this.logDebugActivity(\"application\", \"starting\");\n        this.dispatcher.start();\n        this.router.start();\n        this.logDebugActivity(\"application\", \"start\");\n    }\n    stop() {\n        this.logDebugActivity(\"application\", \"stopping\");\n        this.dispatcher.stop();\n        this.router.stop();\n        this.logDebugActivity(\"application\", \"stop\");\n    }\n    register(identifier, controllerConstructor) {\n        this.load({ identifier, controllerConstructor });\n    }\n    registerActionOption(name, filter) {\n        this.actionDescriptorFilters[name] = filter;\n    }\n    load(head, ...rest) {\n        const definitions = Array.isArray(head) ? head : [head, ...rest];\n        definitions.forEach((definition) => {\n            if (definition.controllerConstructor.shouldLoad) {\n                this.router.loadDefinition(definition);\n            }\n        });\n    }\n    unload(head, ...rest) {\n        const identifiers = Array.isArray(head) ? head : [head, ...rest];\n        identifiers.forEach((identifier) => this.router.unloadIdentifier(identifier));\n    }\n    get controllers() {\n        return this.router.contexts.map((context) => context.controller);\n    }\n    getControllerForElementAndIdentifier(element, identifier) {\n        const context = this.router.getContextForElementAndIdentifier(element, identifier);\n        return context ? context.controller : null;\n    }\n    handleError(error, message, detail) {\n        var _a;\n        this.logger.error(`%s\\n\\n%o\\n\\n%o`, message, error, detail);\n        (_a = window.onerror) === null || _a === void 0 ? void 0 : _a.call(window, message, \"\", 0, 0, error);\n    }\n    logFormattedMessage(identifier, functionName, detail = {}) {\n        detail = Object.assign({ application: this }, detail);\n        this.logger.groupCollapsed(`${identifier} #${functionName}`);\n        this.logger.log(\"details:\", Object.assign({}, detail));\n        this.logger.groupEnd();\n    }\n}\nfunction domReady() {\n    return new Promise((resolve) => {\n        if (document.readyState == \"loading\") {\n            document.addEventListener(\"DOMContentLoaded\", () => resolve());\n        }\n        else {\n            resolve();\n        }\n    });\n}\n\nfunction ClassPropertiesBlessing(constructor) {\n    const classes = readInheritableStaticArrayValues(constructor, \"classes\");\n    return classes.reduce((properties, classDefinition) => {\n        return Object.assign(properties, propertiesForClassDefinition(classDefinition));\n    }, {});\n}\nfunction propertiesForClassDefinition(key) {\n    return {\n        [`${key}Class`]: {\n            get() {\n                const { classes } = this;\n                if (classes.has(key)) {\n                    return classes.get(key);\n                }\n                else {\n                    const attribute = classes.getAttributeName(key);\n                    throw new Error(`Missing attribute \"${attribute}\"`);\n                }\n            },\n        },\n        [`${key}Classes`]: {\n            get() {\n                return this.classes.getAll(key);\n            },\n        },\n        [`has${capitalize(key)}Class`]: {\n            get() {\n                return this.classes.has(key);\n            },\n        },\n    };\n}\n\nfunction OutletPropertiesBlessing(constructor) {\n    const outlets = readInheritableStaticArrayValues(constructor, \"outlets\");\n    return outlets.reduce((properties, outletDefinition) => {\n        return Object.assign(properties, propertiesForOutletDefinition(outletDefinition));\n    }, {});\n}\nfunction getOutletController(controller, element, identifier) {\n    return controller.application.getControllerForElementAndIdentifier(element, identifier);\n}\nfunction getControllerAndEnsureConnectedScope(controller, element, outletName) {\n    let outletController = getOutletController(controller, element, outletName);\n    if (outletController)\n        return outletController;\n    controller.application.router.proposeToConnectScopeForElementAndIdentifier(element, outletName);\n    outletController = getOutletController(controller, element, outletName);\n    if (outletController)\n        return outletController;\n}\nfunction propertiesForOutletDefinition(name) {\n    const camelizedName = namespaceCamelize(name);\n    return {\n        [`${camelizedName}Outlet`]: {\n            get() {\n                const outletElement = this.outlets.find(name);\n                const selector = this.outlets.getSelectorForOutletName(name);\n                if (outletElement) {\n                    const outletController = getControllerAndEnsureConnectedScope(this, outletElement, name);\n                    if (outletController)\n                        return outletController;\n                    throw new Error(`The provided outlet element is missing an outlet controller \"${name}\" instance for host controller \"${this.identifier}\"`);\n                }\n                throw new Error(`Missing outlet element \"${name}\" for host controller \"${this.identifier}\". Stimulus couldn't find a matching outlet element using selector \"${selector}\".`);\n            },\n        },\n        [`${camelizedName}Outlets`]: {\n            get() {\n                const outlets = this.outlets.findAll(name);\n                if (outlets.length > 0) {\n                    return outlets\n                        .map((outletElement) => {\n                        const outletController = getControllerAndEnsureConnectedScope(this, outletElement, name);\n                        if (outletController)\n                            return outletController;\n                        console.warn(`The provided outlet element is missing an outlet controller \"${name}\" instance for host controller \"${this.identifier}\"`, outletElement);\n                    })\n                        .filter((controller) => controller);\n                }\n                return [];\n            },\n        },\n        [`${camelizedName}OutletElement`]: {\n            get() {\n                const outletElement = this.outlets.find(name);\n                const selector = this.outlets.getSelectorForOutletName(name);\n                if (outletElement) {\n                    return outletElement;\n                }\n                else {\n                    throw new Error(`Missing outlet element \"${name}\" for host controller \"${this.identifier}\". Stimulus couldn't find a matching outlet element using selector \"${selector}\".`);\n                }\n            },\n        },\n        [`${camelizedName}OutletElements`]: {\n            get() {\n                return this.outlets.findAll(name);\n            },\n        },\n        [`has${capitalize(camelizedName)}Outlet`]: {\n            get() {\n                return this.outlets.has(name);\n            },\n        },\n    };\n}\n\nfunction TargetPropertiesBlessing(constructor) {\n    const targets = readInheritableStaticArrayValues(constructor, \"targets\");\n    return targets.reduce((properties, targetDefinition) => {\n        return Object.assign(properties, propertiesForTargetDefinition(targetDefinition));\n    }, {});\n}\nfunction propertiesForTargetDefinition(name) {\n    return {\n        [`${name}Target`]: {\n            get() {\n                const target = this.targets.find(name);\n                if (target) {\n                    return target;\n                }\n                else {\n                    throw new Error(`Missing target element \"${name}\" for \"${this.identifier}\" controller`);\n                }\n            },\n        },\n        [`${name}Targets`]: {\n            get() {\n                return this.targets.findAll(name);\n            },\n        },\n        [`has${capitalize(name)}Target`]: {\n            get() {\n                return this.targets.has(name);\n            },\n        },\n    };\n}\n\nfunction ValuePropertiesBlessing(constructor) {\n    const valueDefinitionPairs = readInheritableStaticObjectPairs(constructor, \"values\");\n    const propertyDescriptorMap = {\n        valueDescriptorMap: {\n            get() {\n                return valueDefinitionPairs.reduce((result, valueDefinitionPair) => {\n                    const valueDescriptor = parseValueDefinitionPair(valueDefinitionPair, this.identifier);\n                    const attributeName = this.data.getAttributeNameForKey(valueDescriptor.key);\n                    return Object.assign(result, { [attributeName]: valueDescriptor });\n                }, {});\n            },\n        },\n    };\n    return valueDefinitionPairs.reduce((properties, valueDefinitionPair) => {\n        return Object.assign(properties, propertiesForValueDefinitionPair(valueDefinitionPair));\n    }, propertyDescriptorMap);\n}\nfunction propertiesForValueDefinitionPair(valueDefinitionPair, controller) {\n    const definition = parseValueDefinitionPair(valueDefinitionPair, controller);\n    const { key, name, reader: read, writer: write } = definition;\n    return {\n        [name]: {\n            get() {\n                const value = this.data.get(key);\n                if (value !== null) {\n                    return read(value);\n                }\n                else {\n                    return definition.defaultValue;\n                }\n            },\n            set(value) {\n                if (value === undefined) {\n                    this.data.delete(key);\n                }\n                else {\n                    this.data.set(key, write(value));\n                }\n            },\n        },\n        [`has${capitalize(name)}`]: {\n            get() {\n                return this.data.has(key) || definition.hasCustomDefaultValue;\n            },\n        },\n    };\n}\nfunction parseValueDefinitionPair([token, typeDefinition], controller) {\n    return valueDescriptorForTokenAndTypeDefinition({\n        controller,\n        token,\n        typeDefinition,\n    });\n}\nfunction parseValueTypeConstant(constant) {\n    switch (constant) {\n        case Array:\n            return \"array\";\n        case Boolean:\n            return \"boolean\";\n        case Number:\n            return \"number\";\n        case Object:\n            return \"object\";\n        case String:\n            return \"string\";\n    }\n}\nfunction parseValueTypeDefault(defaultValue) {\n    switch (typeof defaultValue) {\n        case \"boolean\":\n            return \"boolean\";\n        case \"number\":\n            return \"number\";\n        case \"string\":\n            return \"string\";\n    }\n    if (Array.isArray(defaultValue))\n        return \"array\";\n    if (Object.prototype.toString.call(defaultValue) === \"[object Object]\")\n        return \"object\";\n}\nfunction parseValueTypeObject(payload) {\n    const { controller, token, typeObject } = payload;\n    const hasType = isSomething(typeObject.type);\n    const hasDefault = isSomething(typeObject.default);\n    const fullObject = hasType && hasDefault;\n    const onlyType = hasType && !hasDefault;\n    const onlyDefault = !hasType && hasDefault;\n    const typeFromObject = parseValueTypeConstant(typeObject.type);\n    const typeFromDefaultValue = parseValueTypeDefault(payload.typeObject.default);\n    if (onlyType)\n        return typeFromObject;\n    if (onlyDefault)\n        return typeFromDefaultValue;\n    if (typeFromObject !== typeFromDefaultValue) {\n        const propertyPath = controller ? `${controller}.${token}` : token;\n        throw new Error(`The specified default value for the Stimulus Value \"${propertyPath}\" must match the defined type \"${typeFromObject}\". The provided default value of \"${typeObject.default}\" is of type \"${typeFromDefaultValue}\".`);\n    }\n    if (fullObject)\n        return typeFromObject;\n}\nfunction parseValueTypeDefinition(payload) {\n    const { controller, token, typeDefinition } = payload;\n    const typeObject = { controller, token, typeObject: typeDefinition };\n    const typeFromObject = parseValueTypeObject(typeObject);\n    const typeFromDefaultValue = parseValueTypeDefault(typeDefinition);\n    const typeFromConstant = parseValueTypeConstant(typeDefinition);\n    const type = typeFromObject || typeFromDefaultValue || typeFromConstant;\n    if (type)\n        return type;\n    const propertyPath = controller ? `${controller}.${typeDefinition}` : token;\n    throw new Error(`Unknown value type \"${propertyPath}\" for \"${token}\" value`);\n}\nfunction defaultValueForDefinition(typeDefinition) {\n    const constant = parseValueTypeConstant(typeDefinition);\n    if (constant)\n        return defaultValuesByType[constant];\n    const hasDefault = hasProperty(typeDefinition, \"default\");\n    const hasType = hasProperty(typeDefinition, \"type\");\n    const typeObject = typeDefinition;\n    if (hasDefault)\n        return typeObject.default;\n    if (hasType) {\n        const { type } = typeObject;\n        const constantFromType = parseValueTypeConstant(type);\n        if (constantFromType)\n            return defaultValuesByType[constantFromType];\n    }\n    return typeDefinition;\n}\nfunction valueDescriptorForTokenAndTypeDefinition(payload) {\n    const { token, typeDefinition } = payload;\n    const key = `${dasherize(token)}-value`;\n    const type = parseValueTypeDefinition(payload);\n    return {\n        type,\n        key,\n        name: camelize(key),\n        get defaultValue() {\n            return defaultValueForDefinition(typeDefinition);\n        },\n        get hasCustomDefaultValue() {\n            return parseValueTypeDefault(typeDefinition) !== undefined;\n        },\n        reader: readers[type],\n        writer: writers[type] || writers.default,\n    };\n}\nconst defaultValuesByType = {\n    get array() {\n        return [];\n    },\n    boolean: false,\n    number: 0,\n    get object() {\n        return {};\n    },\n    string: \"\",\n};\nconst readers = {\n    array(value) {\n        const array = JSON.parse(value);\n        if (!Array.isArray(array)) {\n            throw new TypeError(`expected value of type \"array\" but instead got value \"${value}\" of type \"${parseValueTypeDefault(array)}\"`);\n        }\n        return array;\n    },\n    boolean(value) {\n        return !(value == \"0\" || String(value).toLowerCase() == \"false\");\n    },\n    number(value) {\n        return Number(value.replace(/_/g, \"\"));\n    },\n    object(value) {\n        const object = JSON.parse(value);\n        if (object === null || typeof object != \"object\" || Array.isArray(object)) {\n            throw new TypeError(`expected value of type \"object\" but instead got value \"${value}\" of type \"${parseValueTypeDefault(object)}\"`);\n        }\n        return object;\n    },\n    string(value) {\n        return value;\n    },\n};\nconst writers = {\n    default: writeString,\n    array: writeJSON,\n    object: writeJSON,\n};\nfunction writeJSON(value) {\n    return JSON.stringify(value);\n}\nfunction writeString(value) {\n    return `${value}`;\n}\n\nclass Controller {\n    constructor(context) {\n        this.context = context;\n    }\n    static get shouldLoad() {\n        return true;\n    }\n    static afterLoad(_identifier, _application) {\n        return;\n    }\n    get application() {\n        return this.context.application;\n    }\n    get scope() {\n        return this.context.scope;\n    }\n    get element() {\n        return this.scope.element;\n    }\n    get identifier() {\n        return this.scope.identifier;\n    }\n    get targets() {\n        return this.scope.targets;\n    }\n    get outlets() {\n        return this.scope.outlets;\n    }\n    get classes() {\n        return this.scope.classes;\n    }\n    get data() {\n        return this.scope.data;\n    }\n    initialize() {\n    }\n    connect() {\n    }\n    disconnect() {\n    }\n    dispatch(eventName, { target = this.element, detail = {}, prefix = this.identifier, bubbles = true, cancelable = true, } = {}) {\n        const type = prefix ? `${prefix}:${eventName}` : eventName;\n        const event = new CustomEvent(type, { detail, bubbles, cancelable });\n        target.dispatchEvent(event);\n        return event;\n    }\n}\nController.blessings = [\n    ClassPropertiesBlessing,\n    TargetPropertiesBlessing,\n    ValuePropertiesBlessing,\n    OutletPropertiesBlessing,\n];\nController.targets = [];\nController.outlets = [];\nController.values = {};\n\nexport { Application, AttributeObserver, Context, Controller, ElementObserver, IndexedMultimap, Multimap, SelectorObserver, StringMapObserver, TokenListObserver, ValueListObserver, add, defaultSchema, del, fetch, prune };\n","import { Controller } from '@hotwired/stimulus';\n\nclass BackendRequest {\n    constructor(promise, actions, updateModels) {\n        this.isResolved = false;\n        this.promise = promise;\n        this.promise.then((response) => {\n            this.isResolved = true;\n            return response;\n        });\n        this.actions = actions;\n        this.updatedModels = updateModels;\n    }\n    containsOneOfActions(targetedActions) {\n        return this.actions.filter((action) => targetedActions.includes(action)).length > 0;\n    }\n    areAnyModelsUpdated(targetedModels) {\n        return this.updatedModels.filter((model) => targetedModels.includes(model)).length > 0;\n    }\n}\n\nclass RequestBuilder {\n    constructor(url, method = 'post') {\n        this.url = url;\n        this.method = method;\n    }\n    buildRequest(props, actions, updated, children, updatedPropsFromParent, files) {\n        const splitUrl = this.url.split('?');\n        let [url] = splitUrl;\n        const [, queryString] = splitUrl;\n        const params = new URLSearchParams(queryString || '');\n        const fetchOptions = {};\n        fetchOptions.headers = {\n            Accept: 'application/vnd.live-component+html',\n            'X-Requested-With': 'XMLHttpRequest',\n        };\n        const totalFiles = Object.entries(files).reduce((total, current) => total + current.length, 0);\n        const hasFingerprints = Object.keys(children).length > 0;\n        if (actions.length === 0 &&\n            totalFiles === 0 &&\n            this.method === 'get' &&\n            this.willDataFitInUrl(JSON.stringify(props), JSON.stringify(updated), params, JSON.stringify(children), JSON.stringify(updatedPropsFromParent))) {\n            params.set('props', JSON.stringify(props));\n            params.set('updated', JSON.stringify(updated));\n            if (Object.keys(updatedPropsFromParent).length > 0) {\n                params.set('propsFromParent', JSON.stringify(updatedPropsFromParent));\n            }\n            if (hasFingerprints) {\n                params.set('children', JSON.stringify(children));\n            }\n            fetchOptions.method = 'GET';\n        }\n        else {\n            fetchOptions.method = 'POST';\n            const requestData = { props, updated };\n            if (Object.keys(updatedPropsFromParent).length > 0) {\n                requestData.propsFromParent = updatedPropsFromParent;\n            }\n            if (hasFingerprints) {\n                requestData.children = children;\n            }\n            if (actions.length > 0) {\n                if (actions.length === 1) {\n                    requestData.args = actions[0].args;\n                    url += `/${encodeURIComponent(actions[0].name)}`;\n                }\n                else {\n                    url += '/_batch';\n                    requestData.actions = actions;\n                }\n            }\n            const formData = new FormData();\n            formData.append('data', JSON.stringify(requestData));\n            for (const [key, value] of Object.entries(files)) {\n                const length = value.length;\n                for (let i = 0; i < length; ++i) {\n                    formData.append(key, value[i]);\n                }\n            }\n            fetchOptions.body = formData;\n        }\n        const paramsString = params.toString();\n        return {\n            url: `${url}${paramsString.length > 0 ? `?${paramsString}` : ''}`,\n            fetchOptions,\n        };\n    }\n    willDataFitInUrl(propsJson, updatedJson, params, childrenJson, propsFromParentJson) {\n        const urlEncodedJsonData = new URLSearchParams(propsJson + updatedJson + childrenJson + propsFromParentJson).toString();\n        return (urlEncodedJsonData + params.toString()).length < 1500;\n    }\n}\n\nclass Backend {\n    constructor(url, method = 'post') {\n        this.requestBuilder = new RequestBuilder(url, method);\n    }\n    makeRequest(props, actions, updated, children, updatedPropsFromParent, files) {\n        const { url, fetchOptions } = this.requestBuilder.buildRequest(props, actions, updated, children, updatedPropsFromParent, files);\n        return new BackendRequest(fetch(url, fetchOptions), actions.map((backendAction) => backendAction.name), Object.keys(updated));\n    }\n}\n\nclass BackendResponse {\n    constructor(response) {\n        this.response = response;\n    }\n    async getBody() {\n        if (!this.body) {\n            this.body = await this.response.text();\n        }\n        return this.body;\n    }\n}\n\nfunction getElementAsTagText(element) {\n    return element.innerHTML\n        ? element.outerHTML.slice(0, element.outerHTML.indexOf(element.innerHTML))\n        : element.outerHTML;\n}\n\nlet componentMapByElement = new WeakMap();\nlet componentMapByComponent = new Map();\nconst registerComponent = (component) => {\n    componentMapByElement.set(component.element, component);\n    componentMapByComponent.set(component, component.name);\n};\nconst unregisterComponent = (component) => {\n    componentMapByElement.delete(component.element);\n    componentMapByComponent.delete(component);\n};\nconst getComponent = (element) => new Promise((resolve, reject) => {\n    let count = 0;\n    const maxCount = 10;\n    const interval = setInterval(() => {\n        const component = componentMapByElement.get(element);\n        if (component) {\n            clearInterval(interval);\n            resolve(component);\n        }\n        count++;\n        if (count > maxCount) {\n            clearInterval(interval);\n            reject(new Error(`Component not found for element ${getElementAsTagText(element)}`));\n        }\n    }, 5);\n});\nconst findComponents = (currentComponent, onlyParents, onlyMatchName) => {\n    const components = [];\n    componentMapByComponent.forEach((componentName, component) => {\n        if (onlyParents && (currentComponent === component || !component.element.contains(currentComponent.element))) {\n            return;\n        }\n        if (onlyMatchName && componentName !== onlyMatchName) {\n            return;\n        }\n        components.push(component);\n    });\n    return components;\n};\nconst findChildren = (currentComponent) => {\n    const children = [];\n    componentMapByComponent.forEach((componentName, component) => {\n        if (currentComponent === component) {\n            return;\n        }\n        if (!currentComponent.element.contains(component.element)) {\n            return;\n        }\n        let foundChildComponent = false;\n        componentMapByComponent.forEach((childComponentName, childComponent) => {\n            if (foundChildComponent) {\n                return;\n            }\n            if (childComponent === component) {\n                return;\n            }\n            if (childComponent.element.contains(component.element)) {\n                foundChildComponent = true;\n            }\n        });\n        children.push(component);\n    });\n    return children;\n};\nconst findParent = (currentComponent) => {\n    let parentElement = currentComponent.element.parentElement;\n    while (parentElement) {\n        const component = componentMapByElement.get(parentElement);\n        if (component) {\n            return component;\n        }\n        parentElement = parentElement.parentElement;\n    }\n    return null;\n};\n\nclass HookManager {\n    constructor() {\n        this.hooks = new Map();\n    }\n    register(hookName, callback) {\n        const hooks = this.hooks.get(hookName) || [];\n        hooks.push(callback);\n        this.hooks.set(hookName, hooks);\n    }\n    unregister(hookName, callback) {\n        const hooks = this.hooks.get(hookName) || [];\n        const index = hooks.indexOf(callback);\n        if (index === -1) {\n            return;\n        }\n        hooks.splice(index, 1);\n        this.hooks.set(hookName, hooks);\n    }\n    triggerHook(hookName, ...args) {\n        const hooks = this.hooks.get(hookName) || [];\n        hooks.forEach((callback) => callback(...args));\n    }\n}\n\nclass ChangingItemsTracker {\n    constructor() {\n        this.changedItems = new Map();\n        this.removedItems = new Map();\n    }\n    setItem(itemName, newValue, previousValue) {\n        if (this.removedItems.has(itemName)) {\n            const removedRecord = this.removedItems.get(itemName);\n            this.removedItems.delete(itemName);\n            if (removedRecord.original === newValue) {\n                return;\n            }\n        }\n        if (this.changedItems.has(itemName)) {\n            const originalRecord = this.changedItems.get(itemName);\n            if (originalRecord.original === newValue) {\n                this.changedItems.delete(itemName);\n                return;\n            }\n            this.changedItems.set(itemName, { original: originalRecord.original, new: newValue });\n            return;\n        }\n        this.changedItems.set(itemName, { original: previousValue, new: newValue });\n    }\n    removeItem(itemName, currentValue) {\n        let trueOriginalValue = currentValue;\n        if (this.changedItems.has(itemName)) {\n            const originalRecord = this.changedItems.get(itemName);\n            trueOriginalValue = originalRecord.original;\n            this.changedItems.delete(itemName);\n            if (trueOriginalValue === null) {\n                return;\n            }\n        }\n        if (!this.removedItems.has(itemName)) {\n            this.removedItems.set(itemName, { original: trueOriginalValue });\n        }\n    }\n    getChangedItems() {\n        return Array.from(this.changedItems, ([name, { new: value }]) => ({ name, value }));\n    }\n    getRemovedItems() {\n        return Array.from(this.removedItems.keys());\n    }\n    isEmpty() {\n        return this.changedItems.size === 0 && this.removedItems.size === 0;\n    }\n}\n\nclass ElementChanges {\n    constructor() {\n        this.addedClasses = new Set();\n        this.removedClasses = new Set();\n        this.styleChanges = new ChangingItemsTracker();\n        this.attributeChanges = new ChangingItemsTracker();\n    }\n    addClass(className) {\n        if (!this.removedClasses.delete(className)) {\n            this.addedClasses.add(className);\n        }\n    }\n    removeClass(className) {\n        if (!this.addedClasses.delete(className)) {\n            this.removedClasses.add(className);\n        }\n    }\n    addStyle(styleName, newValue, originalValue) {\n        this.styleChanges.setItem(styleName, newValue, originalValue);\n    }\n    removeStyle(styleName, originalValue) {\n        this.styleChanges.removeItem(styleName, originalValue);\n    }\n    addAttribute(attributeName, newValue, originalValue) {\n        this.attributeChanges.setItem(attributeName, newValue, originalValue);\n    }\n    removeAttribute(attributeName, originalValue) {\n        this.attributeChanges.removeItem(attributeName, originalValue);\n    }\n    getAddedClasses() {\n        return [...this.addedClasses];\n    }\n    getRemovedClasses() {\n        return [...this.removedClasses];\n    }\n    getChangedStyles() {\n        return this.styleChanges.getChangedItems();\n    }\n    getRemovedStyles() {\n        return this.styleChanges.getRemovedItems();\n    }\n    getChangedAttributes() {\n        return this.attributeChanges.getChangedItems();\n    }\n    getRemovedAttributes() {\n        return this.attributeChanges.getRemovedItems();\n    }\n    applyToElement(element) {\n        element.classList.add(...this.addedClasses);\n        element.classList.remove(...this.removedClasses);\n        this.styleChanges.getChangedItems().forEach((change) => {\n            element.style.setProperty(change.name, change.value);\n            return;\n        });\n        this.styleChanges.getRemovedItems().forEach((styleName) => {\n            element.style.removeProperty(styleName);\n        });\n        this.attributeChanges.getChangedItems().forEach((change) => {\n            element.setAttribute(change.name, change.value);\n        });\n        this.attributeChanges.getRemovedItems().forEach((attributeName) => {\n            element.removeAttribute(attributeName);\n        });\n    }\n    isEmpty() {\n        return (this.addedClasses.size === 0 &&\n            this.removedClasses.size === 0 &&\n            this.styleChanges.isEmpty() &&\n            this.attributeChanges.isEmpty());\n    }\n}\n\nclass ExternalMutationTracker {\n    constructor(element, shouldTrackChangeCallback) {\n        this.changedElements = new WeakMap();\n        this.changedElementsCount = 0;\n        this.addedElements = [];\n        this.removedElements = [];\n        this.isStarted = false;\n        this.element = element;\n        this.shouldTrackChangeCallback = shouldTrackChangeCallback;\n        this.mutationObserver = new MutationObserver(this.onMutations.bind(this));\n    }\n    start() {\n        if (this.isStarted) {\n            return;\n        }\n        this.mutationObserver.observe(this.element, {\n            childList: true,\n            subtree: true,\n            attributes: true,\n            attributeOldValue: true,\n        });\n        this.isStarted = true;\n    }\n    stop() {\n        if (this.isStarted) {\n            this.mutationObserver.disconnect();\n            this.isStarted = false;\n        }\n    }\n    getChangedElement(element) {\n        return this.changedElements.has(element) ? this.changedElements.get(element) : null;\n    }\n    getAddedElements() {\n        return this.addedElements;\n    }\n    wasElementAdded(element) {\n        return this.addedElements.includes(element);\n    }\n    handlePendingChanges() {\n        this.onMutations(this.mutationObserver.takeRecords());\n    }\n    onMutations(mutations) {\n        const handledAttributeMutations = new WeakMap();\n        for (const mutation of mutations) {\n            const element = mutation.target;\n            if (!this.shouldTrackChangeCallback(element)) {\n                continue;\n            }\n            if (this.isElementAddedByTranslation(element)) {\n                continue;\n            }\n            let isChangeInAddedElement = false;\n            for (const addedElement of this.addedElements) {\n                if (addedElement.contains(element)) {\n                    isChangeInAddedElement = true;\n                    break;\n                }\n            }\n            if (isChangeInAddedElement) {\n                continue;\n            }\n            switch (mutation.type) {\n                case 'childList':\n                    this.handleChildListMutation(mutation);\n                    break;\n                case 'attributes':\n                    if (!handledAttributeMutations.has(element)) {\n                        handledAttributeMutations.set(element, []);\n                    }\n                    if (!handledAttributeMutations.get(element).includes(mutation.attributeName)) {\n                        this.handleAttributeMutation(mutation);\n                        handledAttributeMutations.set(element, [\n                            ...handledAttributeMutations.get(element),\n                            mutation.attributeName,\n                        ]);\n                    }\n                    break;\n            }\n        }\n    }\n    handleChildListMutation(mutation) {\n        mutation.addedNodes.forEach((node) => {\n            if (!(node instanceof Element)) {\n                return;\n            }\n            if (this.removedElements.includes(node)) {\n                this.removedElements.splice(this.removedElements.indexOf(node), 1);\n                return;\n            }\n            if (this.isElementAddedByTranslation(node)) {\n                return;\n            }\n            this.addedElements.push(node);\n        });\n        mutation.removedNodes.forEach((node) => {\n            if (!(node instanceof Element)) {\n                return;\n            }\n            if (this.addedElements.includes(node)) {\n                this.addedElements.splice(this.addedElements.indexOf(node), 1);\n                return;\n            }\n            this.removedElements.push(node);\n        });\n    }\n    handleAttributeMutation(mutation) {\n        const element = mutation.target;\n        if (!this.changedElements.has(element)) {\n            this.changedElements.set(element, new ElementChanges());\n            this.changedElementsCount++;\n        }\n        const changedElement = this.changedElements.get(element);\n        switch (mutation.attributeName) {\n            case 'class':\n                this.handleClassAttributeMutation(mutation, changedElement);\n                break;\n            case 'style':\n                this.handleStyleAttributeMutation(mutation, changedElement);\n                break;\n            default:\n                this.handleGenericAttributeMutation(mutation, changedElement);\n        }\n        if (changedElement.isEmpty()) {\n            this.changedElements.delete(element);\n            this.changedElementsCount--;\n        }\n    }\n    handleClassAttributeMutation(mutation, elementChanges) {\n        const element = mutation.target;\n        const previousValue = mutation.oldValue || '';\n        const previousValues = previousValue.match(/(\\S+)/gu) || [];\n        const newValues = [].slice.call(element.classList);\n        const addedValues = newValues.filter((value) => !previousValues.includes(value));\n        const removedValues = previousValues.filter((value) => !newValues.includes(value));\n        addedValues.forEach((value) => {\n            elementChanges.addClass(value);\n        });\n        removedValues.forEach((value) => {\n            elementChanges.removeClass(value);\n        });\n    }\n    handleStyleAttributeMutation(mutation, elementChanges) {\n        const element = mutation.target;\n        const previousValue = mutation.oldValue || '';\n        const previousStyles = this.extractStyles(previousValue);\n        const newValue = element.getAttribute('style') || '';\n        const newStyles = this.extractStyles(newValue);\n        const addedOrChangedStyles = Object.keys(newStyles).filter((key) => previousStyles[key] === undefined || previousStyles[key] !== newStyles[key]);\n        const removedStyles = Object.keys(previousStyles).filter((key) => !newStyles[key]);\n        addedOrChangedStyles.forEach((style) => {\n            elementChanges.addStyle(style, newStyles[style], previousStyles[style] === undefined ? null : previousStyles[style]);\n        });\n        removedStyles.forEach((style) => {\n            elementChanges.removeStyle(style, previousStyles[style]);\n        });\n    }\n    handleGenericAttributeMutation(mutation, elementChanges) {\n        const attributeName = mutation.attributeName;\n        const element = mutation.target;\n        let oldValue = mutation.oldValue;\n        let newValue = element.getAttribute(attributeName);\n        if (oldValue === attributeName) {\n            oldValue = '';\n        }\n        if (newValue === attributeName) {\n            newValue = '';\n        }\n        if (!element.hasAttribute(attributeName)) {\n            if (oldValue === null) {\n                return;\n            }\n            elementChanges.removeAttribute(attributeName, mutation.oldValue);\n            return;\n        }\n        if (newValue === oldValue) {\n            return;\n        }\n        elementChanges.addAttribute(attributeName, element.getAttribute(attributeName), mutation.oldValue);\n    }\n    extractStyles(styles) {\n        const styleObject = {};\n        styles.split(';').forEach((style) => {\n            const parts = style.split(':');\n            if (parts.length === 1) {\n                return;\n            }\n            const property = parts[0].trim();\n            styleObject[property] = parts.slice(1).join(':').trim();\n        });\n        return styleObject;\n    }\n    isElementAddedByTranslation(element) {\n        return element.tagName === 'FONT' && element.getAttribute('style') === 'vertical-align: inherit;';\n    }\n}\n\nfunction parseDirectives(content) {\n    const directives = [];\n    if (!content) {\n        return directives;\n    }\n    let currentActionName = '';\n    let currentArgumentValue = '';\n    let currentArguments = [];\n    let currentModifiers = [];\n    let state = 'action';\n    const getLastActionName = () => {\n        if (currentActionName) {\n            return currentActionName;\n        }\n        if (directives.length === 0) {\n            throw new Error('Could not find any directives');\n        }\n        return directives[directives.length - 1].action;\n    };\n    const pushInstruction = () => {\n        directives.push({\n            action: currentActionName,\n            args: currentArguments,\n            modifiers: currentModifiers,\n            getString: () => {\n                return content;\n            },\n        });\n        currentActionName = '';\n        currentArgumentValue = '';\n        currentArguments = [];\n        currentModifiers = [];\n        state = 'action';\n    };\n    const pushArgument = () => {\n        currentArguments.push(currentArgumentValue.trim());\n        currentArgumentValue = '';\n    };\n    const pushModifier = () => {\n        if (currentArguments.length > 1) {\n            throw new Error(`The modifier \"${currentActionName}()\" does not support multiple arguments.`);\n        }\n        currentModifiers.push({\n            name: currentActionName,\n            value: currentArguments.length > 0 ? currentArguments[0] : null,\n        });\n        currentActionName = '';\n        currentArguments = [];\n        state = 'action';\n    };\n    for (let i = 0; i < content.length; i++) {\n        const char = content[i];\n        switch (state) {\n            case 'action':\n                if (char === '(') {\n                    state = 'arguments';\n                    break;\n                }\n                if (char === ' ') {\n                    if (currentActionName) {\n                        pushInstruction();\n                    }\n                    break;\n                }\n                if (char === '|') {\n                    pushModifier();\n                    break;\n                }\n                currentActionName += char;\n                break;\n            case 'arguments':\n                if (char === ')') {\n                    pushArgument();\n                    state = 'after_arguments';\n                    break;\n                }\n                if (char === ',') {\n                    pushArgument();\n                    break;\n                }\n                currentArgumentValue += char;\n                break;\n            case 'after_arguments':\n                if (char === '|') {\n                    pushModifier();\n                    break;\n                }\n                if (char !== ' ') {\n                    throw new Error(`Missing space after ${getLastActionName()}()`);\n                }\n                pushInstruction();\n                break;\n        }\n    }\n    switch (state) {\n        case 'action':\n        case 'after_arguments':\n            if (currentActionName) {\n                pushInstruction();\n            }\n            break;\n        default:\n            throw new Error(`Did you forget to add a closing \")\" after \"${currentActionName}\"?`);\n    }\n    return directives;\n}\n\nfunction combineSpacedArray(parts) {\n    const finalParts = [];\n    parts.forEach((part) => {\n        finalParts.push(...trimAll(part).split(' '));\n    });\n    return finalParts;\n}\nfunction trimAll(str) {\n    return str.replace(/[\\s]+/g, ' ').trim();\n}\nfunction normalizeModelName(model) {\n    return (model\n        .replace(/\\[]$/, '')\n        .split('[')\n        .map((s) => s.replace(']', ''))\n        .join('.'));\n}\n\nfunction getValueFromElement(element, valueStore) {\n    if (element instanceof HTMLInputElement) {\n        if (element.type === 'checkbox') {\n            const modelNameData = getModelDirectiveFromElement(element, false);\n            if (modelNameData !== null) {\n                const modelValue = valueStore.get(modelNameData.action);\n                if (Array.isArray(modelValue)) {\n                    return getMultipleCheckboxValue(element, modelValue);\n                }\n                if (Object(modelValue) === modelValue) {\n                    return getMultipleCheckboxValue(element, Object.values(modelValue));\n                }\n            }\n            if (element.hasAttribute('value')) {\n                return element.checked ? element.getAttribute('value') : null;\n            }\n            return element.checked;\n        }\n        return inputValue(element);\n    }\n    if (element instanceof HTMLSelectElement) {\n        if (element.multiple) {\n            return Array.from(element.selectedOptions).map((el) => el.value);\n        }\n        return element.value;\n    }\n    if (element.dataset.value) {\n        return element.dataset.value;\n    }\n    if ('value' in element) {\n        return element.value;\n    }\n    if (element.hasAttribute('value')) {\n        return element.getAttribute('value');\n    }\n    return null;\n}\nfunction setValueOnElement(element, value) {\n    if (element instanceof HTMLInputElement) {\n        if (element.type === 'file') {\n            return;\n        }\n        if (element.type === 'radio') {\n            element.checked = element.value == value;\n            return;\n        }\n        if (element.type === 'checkbox') {\n            if (Array.isArray(value)) {\n                element.checked = value.some((val) => val == element.value);\n            }\n            else if (element.hasAttribute('value')) {\n                element.checked = element.value == value;\n            }\n            else {\n                element.checked = value;\n            }\n            return;\n        }\n    }\n    if (element instanceof HTMLSelectElement) {\n        const arrayWrappedValue = [].concat(value).map((value) => {\n            return `${value}`;\n        });\n        Array.from(element.options).forEach((option) => {\n            option.selected = arrayWrappedValue.includes(option.value);\n        });\n        return;\n    }\n    value = value === undefined ? '' : value;\n    element.value = value;\n}\nfunction getAllModelDirectiveFromElements(element) {\n    if (!element.dataset.model) {\n        return [];\n    }\n    const directives = parseDirectives(element.dataset.model);\n    directives.forEach((directive) => {\n        if (directive.args.length > 0) {\n            throw new Error(`The data-model=\"${element.dataset.model}\" format is invalid: it does not support passing arguments to the model.`);\n        }\n        directive.action = normalizeModelName(directive.action);\n    });\n    return directives;\n}\nfunction getModelDirectiveFromElement(element, throwOnMissing = true) {\n    const dataModelDirectives = getAllModelDirectiveFromElements(element);\n    if (dataModelDirectives.length > 0) {\n        return dataModelDirectives[0];\n    }\n    if (element.getAttribute('name')) {\n        const formElement = element.closest('form');\n        if (formElement && 'model' in formElement.dataset) {\n            const directives = parseDirectives(formElement.dataset.model || '*');\n            const directive = directives[0];\n            if (directive.args.length > 0) {\n                throw new Error(`The data-model=\"${formElement.dataset.model}\" format is invalid: it does not support passing arguments to the model.`);\n            }\n            directive.action = normalizeModelName(element.getAttribute('name'));\n            return directive;\n        }\n    }\n    if (!throwOnMissing) {\n        return null;\n    }\n    throw new Error(`Cannot determine the model name for \"${getElementAsTagText(element)}\": the element must either have a \"data-model\" (or \"name\" attribute living inside a <form data-model=\"*\">).`);\n}\nfunction elementBelongsToThisComponent(element, component) {\n    if (component.element === element) {\n        return true;\n    }\n    if (!component.element.contains(element)) {\n        return false;\n    }\n    const closestLiveComponent = element.closest('[data-controller~=\"live\"]');\n    return closestLiveComponent === component.element;\n}\nfunction cloneHTMLElement(element) {\n    const newElement = element.cloneNode(true);\n    if (!(newElement instanceof HTMLElement)) {\n        throw new Error('Could not clone element');\n    }\n    return newElement;\n}\nfunction htmlToElement(html) {\n    const template = document.createElement('template');\n    html = html.trim();\n    template.innerHTML = html;\n    if (template.content.childElementCount > 1) {\n        throw new Error(`Component HTML contains ${template.content.childElementCount} elements, but only 1 root element is allowed.`);\n    }\n    const child = template.content.firstElementChild;\n    if (!child) {\n        throw new Error('Child not found');\n    }\n    if (!(child instanceof HTMLElement)) {\n        throw new Error(`Created element is not an HTMLElement: ${html.trim()}`);\n    }\n    return child;\n}\nconst getMultipleCheckboxValue = (element, currentValues) => {\n    const finalValues = [...currentValues];\n    const value = inputValue(element);\n    const index = currentValues.indexOf(value);\n    if (element.checked) {\n        if (index === -1) {\n            finalValues.push(value);\n        }\n        return finalValues;\n    }\n    if (index > -1) {\n        finalValues.splice(index, 1);\n    }\n    return finalValues;\n};\nconst inputValue = (element) => element.dataset.value ? element.dataset.value : element.value;\n\n// base IIFE to define idiomorph\nvar Idiomorph = (function () {\n\n        //=============================================================================\n        // AND NOW IT BEGINS...\n        //=============================================================================\n        let EMPTY_SET = new Set();\n\n        // default configuration values, updatable by users now\n        let defaults = {\n            morphStyle: \"outerHTML\",\n            callbacks : {\n                beforeNodeAdded: noOp,\n                afterNodeAdded: noOp,\n                beforeNodeMorphed: noOp,\n                afterNodeMorphed: noOp,\n                beforeNodeRemoved: noOp,\n                afterNodeRemoved: noOp,\n                beforeAttributeUpdated: noOp,\n\n            },\n            head: {\n                style: 'merge',\n                shouldPreserve: function (elt) {\n                    return elt.getAttribute(\"im-preserve\") === \"true\";\n                },\n                shouldReAppend: function (elt) {\n                    return elt.getAttribute(\"im-re-append\") === \"true\";\n                },\n                shouldRemove: noOp,\n                afterHeadMorphed: noOp,\n            }\n        };\n\n        //=============================================================================\n        // Core Morphing Algorithm - morph, morphNormalizedContent, morphOldNodeTo, morphChildren\n        //=============================================================================\n        function morph(oldNode, newContent, config = {}) {\n\n            if (oldNode instanceof Document) {\n                oldNode = oldNode.documentElement;\n            }\n\n            if (typeof newContent === 'string') {\n                newContent = parseContent(newContent);\n            }\n\n            let normalizedContent = normalizeContent(newContent);\n\n            let ctx = createMorphContext(oldNode, normalizedContent, config);\n\n            return morphNormalizedContent(oldNode, normalizedContent, ctx);\n        }\n\n        function morphNormalizedContent(oldNode, normalizedNewContent, ctx) {\n            if (ctx.head.block) {\n                let oldHead = oldNode.querySelector('head');\n                let newHead = normalizedNewContent.querySelector('head');\n                if (oldHead && newHead) {\n                    let promises = handleHeadElement(newHead, oldHead, ctx);\n                    // when head promises resolve, call morph again, ignoring the head tag\n                    Promise.all(promises).then(function () {\n                        morphNormalizedContent(oldNode, normalizedNewContent, Object.assign(ctx, {\n                            head: {\n                                block: false,\n                                ignore: true\n                            }\n                        }));\n                    });\n                    return;\n                }\n            }\n\n            if (ctx.morphStyle === \"innerHTML\") {\n\n                // innerHTML, so we are only updating the children\n                morphChildren(normalizedNewContent, oldNode, ctx);\n                return oldNode.children;\n\n            } else if (ctx.morphStyle === \"outerHTML\" || ctx.morphStyle == null) {\n                // otherwise find the best element match in the new content, morph that, and merge its siblings\n                // into either side of the best match\n                let bestMatch = findBestNodeMatch(normalizedNewContent, oldNode, ctx);\n\n                // stash the siblings that will need to be inserted on either side of the best match\n                let previousSibling = bestMatch?.previousSibling;\n                let nextSibling = bestMatch?.nextSibling;\n\n                // morph it\n                let morphedNode = morphOldNodeTo(oldNode, bestMatch, ctx);\n\n                if (bestMatch) {\n                    // if there was a best match, merge the siblings in too and return the\n                    // whole bunch\n                    return insertSiblings(previousSibling, morphedNode, nextSibling);\n                } else {\n                    // otherwise nothing was added to the DOM\n                    return []\n                }\n            } else {\n                throw \"Do not understand how to morph style \" + ctx.morphStyle;\n            }\n        }\n\n\n        /**\n         * @param possibleActiveElement\n         * @param ctx\n         * @returns {boolean}\n         */\n        function ignoreValueOfActiveElement(possibleActiveElement, ctx) {\n            return ctx.ignoreActiveValue && possibleActiveElement === document.activeElement;\n        }\n\n        /**\n         * @param oldNode root node to merge content into\n         * @param newContent new content to merge\n         * @param ctx the merge context\n         * @returns {Element} the element that ended up in the DOM\n         */\n        function morphOldNodeTo(oldNode, newContent, ctx) {\n            if (ctx.ignoreActive && oldNode === document.activeElement) ; else if (newContent == null) {\n                if (ctx.callbacks.beforeNodeRemoved(oldNode) === false) return oldNode;\n\n                oldNode.remove();\n                ctx.callbacks.afterNodeRemoved(oldNode);\n                return null;\n            } else if (!isSoftMatch(oldNode, newContent)) {\n                if (ctx.callbacks.beforeNodeRemoved(oldNode) === false) return oldNode;\n                if (ctx.callbacks.beforeNodeAdded(newContent) === false) return oldNode;\n\n                oldNode.parentElement.replaceChild(newContent, oldNode);\n                ctx.callbacks.afterNodeAdded(newContent);\n                ctx.callbacks.afterNodeRemoved(oldNode);\n                return newContent;\n            } else {\n                if (ctx.callbacks.beforeNodeMorphed(oldNode, newContent) === false) return oldNode;\n\n                if (oldNode instanceof HTMLHeadElement && ctx.head.ignore) ; else if (oldNode instanceof HTMLHeadElement && ctx.head.style !== \"morph\") {\n                    handleHeadElement(newContent, oldNode, ctx);\n                } else {\n                    syncNodeFrom(newContent, oldNode, ctx);\n                    if (!ignoreValueOfActiveElement(oldNode, ctx)) {\n                        morphChildren(newContent, oldNode, ctx);\n                    }\n                }\n                ctx.callbacks.afterNodeMorphed(oldNode, newContent);\n                return oldNode;\n            }\n        }\n\n        /**\n         * This is the core algorithm for matching up children.  The idea is to use id sets to try to match up\n         * nodes as faithfully as possible.  We greedily match, which allows us to keep the algorithm fast, but\n         * by using id sets, we are able to better match up with content deeper in the DOM.\n         *\n         * Basic algorithm is, for each node in the new content:\n         *\n         * - if we have reached the end of the old parent, append the new content\n         * - if the new content has an id set match with the current insertion point, morph\n         * - search for an id set match\n         * - if id set match found, morph\n         * - otherwise search for a \"soft\" match\n         * - if a soft match is found, morph\n         * - otherwise, prepend the new node before the current insertion point\n         *\n         * The two search algorithms terminate if competing node matches appear to outweigh what can be achieved\n         * with the current node.  See findIdSetMatch() and findSoftMatch() for details.\n         *\n         * @param {Element} newParent the parent element of the new content\n         * @param {Element } oldParent the old content that we are merging the new content into\n         * @param ctx the merge context\n         */\n        function morphChildren(newParent, oldParent, ctx) {\n\n            let nextNewChild = newParent.firstChild;\n            let insertionPoint = oldParent.firstChild;\n            let newChild;\n\n            // run through all the new content\n            while (nextNewChild) {\n\n                newChild = nextNewChild;\n                nextNewChild = newChild.nextSibling;\n\n                // if we are at the end of the exiting parent's children, just append\n                if (insertionPoint == null) {\n                    if (ctx.callbacks.beforeNodeAdded(newChild) === false) return;\n\n                    oldParent.appendChild(newChild);\n                    ctx.callbacks.afterNodeAdded(newChild);\n                    removeIdsFromConsideration(ctx, newChild);\n                    continue;\n                }\n\n                // if the current node has an id set match then morph\n                if (isIdSetMatch(newChild, insertionPoint, ctx)) {\n                    morphOldNodeTo(insertionPoint, newChild, ctx);\n                    insertionPoint = insertionPoint.nextSibling;\n                    removeIdsFromConsideration(ctx, newChild);\n                    continue;\n                }\n\n                // otherwise search forward in the existing old children for an id set match\n                let idSetMatch = findIdSetMatch(newParent, oldParent, newChild, insertionPoint, ctx);\n\n                // if we found a potential match, remove the nodes until that point and morph\n                if (idSetMatch) {\n                    insertionPoint = removeNodesBetween(insertionPoint, idSetMatch, ctx);\n                    morphOldNodeTo(idSetMatch, newChild, ctx);\n                    removeIdsFromConsideration(ctx, newChild);\n                    continue;\n                }\n\n                // no id set match found, so scan forward for a soft match for the current node\n                let softMatch = findSoftMatch(newParent, oldParent, newChild, insertionPoint, ctx);\n\n                // if we found a soft match for the current node, morph\n                if (softMatch) {\n                    insertionPoint = removeNodesBetween(insertionPoint, softMatch, ctx);\n                    morphOldNodeTo(softMatch, newChild, ctx);\n                    removeIdsFromConsideration(ctx, newChild);\n                    continue;\n                }\n\n                // abandon all hope of morphing, just insert the new child before the insertion point\n                // and move on\n                if (ctx.callbacks.beforeNodeAdded(newChild) === false) return;\n\n                oldParent.insertBefore(newChild, insertionPoint);\n                ctx.callbacks.afterNodeAdded(newChild);\n                removeIdsFromConsideration(ctx, newChild);\n            }\n\n            // remove any remaining old nodes that didn't match up with new content\n            while (insertionPoint !== null) {\n\n                let tempNode = insertionPoint;\n                insertionPoint = insertionPoint.nextSibling;\n                removeNode(tempNode, ctx);\n            }\n        }\n\n        //=============================================================================\n        // Attribute Syncing Code\n        //=============================================================================\n\n        /**\n         * @param attr {String} the attribute to be mutated\n         * @param to {Element} the element that is going to be updated\n         * @param updateType {(\"update\"|\"remove\")}\n         * @param ctx the merge context\n         * @returns {boolean} true if the attribute should be ignored, false otherwise\n         */\n        function ignoreAttribute(attr, to, updateType, ctx) {\n            if(attr === 'value' && ctx.ignoreActiveValue && to === document.activeElement){\n                return true;\n            }\n            return ctx.callbacks.beforeAttributeUpdated(attr, to, updateType) === false;\n        }\n\n        /**\n         * syncs a given node with another node, copying over all attributes and\n         * inner element state from the 'from' node to the 'to' node\n         *\n         * @param {Element} from the element to copy attributes & state from\n         * @param {Element} to the element to copy attributes & state to\n         * @param ctx the merge context\n         */\n        function syncNodeFrom(from, to, ctx) {\n            let type = from.nodeType;\n\n            // if is an element type, sync the attributes from the\n            // new node into the new node\n            if (type === 1 /* element type */) {\n                const fromAttributes = from.attributes;\n                const toAttributes = to.attributes;\n                for (const fromAttribute of fromAttributes) {\n                    if (ignoreAttribute(fromAttribute.name, to, 'update', ctx)) {\n                        continue;\n                    }\n                    if (to.getAttribute(fromAttribute.name) !== fromAttribute.value) {\n                        to.setAttribute(fromAttribute.name, fromAttribute.value);\n                    }\n                }\n                // iterate backwards to avoid skipping over items when a delete occurs\n                for (let i = toAttributes.length - 1; 0 <= i; i--) {\n                    const toAttribute = toAttributes[i];\n                    if (ignoreAttribute(toAttribute.name, to, 'remove', ctx)) {\n                        continue;\n                    }\n                    if (!from.hasAttribute(toAttribute.name)) {\n                        to.removeAttribute(toAttribute.name);\n                    }\n                }\n            }\n\n            // sync text nodes\n            if (type === 8 /* comment */ || type === 3 /* text */) {\n                if (to.nodeValue !== from.nodeValue) {\n                    to.nodeValue = from.nodeValue;\n                }\n            }\n\n            if (!ignoreValueOfActiveElement(to, ctx)) {\n                // sync input values\n                syncInputValue(from, to, ctx);\n            }\n        }\n\n        /**\n         * @param from {Element} element to sync the value from\n         * @param to {Element} element to sync the value to\n         * @param attributeName {String} the attribute name\n         * @param ctx the merge context\n         */\n        function syncBooleanAttribute(from, to, attributeName, ctx) {\n            if (from[attributeName] !== to[attributeName]) {\n                let ignoreUpdate = ignoreAttribute(attributeName, to, 'update', ctx);\n                if (!ignoreUpdate) {\n                    to[attributeName] = from[attributeName];\n                }\n                if (from[attributeName]) {\n                    if (!ignoreUpdate) {\n                        to.setAttribute(attributeName, from[attributeName]);\n                    }\n                } else {\n                    if (!ignoreAttribute(attributeName, to, 'remove', ctx)) {\n                        to.removeAttribute(attributeName);\n                    }\n                }\n            }\n        }\n\n        /**\n         * NB: many bothans died to bring us information:\n         *\n         *  https://github.com/patrick-steele-idem/morphdom/blob/master/src/specialElHandlers.js\n         *  https://github.com/choojs/nanomorph/blob/master/lib/morph.jsL113\n         *\n         * @param from {Element} the element to sync the input value from\n         * @param to {Element} the element to sync the input value to\n         * @param ctx the merge context\n         */\n        function syncInputValue(from, to, ctx) {\n            if (from instanceof HTMLInputElement &&\n                to instanceof HTMLInputElement &&\n                from.type !== 'file') {\n\n                let fromValue = from.value;\n                let toValue = to.value;\n\n                // sync boolean attributes\n                syncBooleanAttribute(from, to, 'checked', ctx);\n                syncBooleanAttribute(from, to, 'disabled', ctx);\n\n                if (!from.hasAttribute('value')) {\n                    if (!ignoreAttribute('value', to, 'remove', ctx)) {\n                        to.value = '';\n                        to.removeAttribute('value');\n                    }\n                } else if (fromValue !== toValue) {\n                    if (!ignoreAttribute('value', to, 'update', ctx)) {\n                        to.setAttribute('value', fromValue);\n                        to.value = fromValue;\n                    }\n                }\n            } else if (from instanceof HTMLOptionElement) {\n                syncBooleanAttribute(from, to, 'selected', ctx);\n            } else if (from instanceof HTMLTextAreaElement && to instanceof HTMLTextAreaElement) {\n                let fromValue = from.value;\n                let toValue = to.value;\n                if (ignoreAttribute('value', to, 'update', ctx)) {\n                    return;\n                }\n                if (fromValue !== toValue) {\n                    to.value = fromValue;\n                }\n                if (to.firstChild && to.firstChild.nodeValue !== fromValue) {\n                    to.firstChild.nodeValue = fromValue;\n                }\n            }\n        }\n\n        //=============================================================================\n        // the HEAD tag can be handled specially, either w/ a 'merge' or 'append' style\n        //=============================================================================\n        function handleHeadElement(newHeadTag, currentHead, ctx) {\n\n            let added = [];\n            let removed = [];\n            let preserved = [];\n            let nodesToAppend = [];\n\n            let headMergeStyle = ctx.head.style;\n\n            // put all new head elements into a Map, by their outerHTML\n            let srcToNewHeadNodes = new Map();\n            for (const newHeadChild of newHeadTag.children) {\n                srcToNewHeadNodes.set(newHeadChild.outerHTML, newHeadChild);\n            }\n\n            // for each elt in the current head\n            for (const currentHeadElt of currentHead.children) {\n\n                // If the current head element is in the map\n                let inNewContent = srcToNewHeadNodes.has(currentHeadElt.outerHTML);\n                let isReAppended = ctx.head.shouldReAppend(currentHeadElt);\n                let isPreserved = ctx.head.shouldPreserve(currentHeadElt);\n                if (inNewContent || isPreserved) {\n                    if (isReAppended) {\n                        // remove the current version and let the new version replace it and re-execute\n                        removed.push(currentHeadElt);\n                    } else {\n                        // this element already exists and should not be re-appended, so remove it from\n                        // the new content map, preserving it in the DOM\n                        srcToNewHeadNodes.delete(currentHeadElt.outerHTML);\n                        preserved.push(currentHeadElt);\n                    }\n                } else {\n                    if (headMergeStyle === \"append\") {\n                        // we are appending and this existing element is not new content\n                        // so if and only if it is marked for re-append do we do anything\n                        if (isReAppended) {\n                            removed.push(currentHeadElt);\n                            nodesToAppend.push(currentHeadElt);\n                        }\n                    } else {\n                        // if this is a merge, we remove this content since it is not in the new head\n                        if (ctx.head.shouldRemove(currentHeadElt) !== false) {\n                            removed.push(currentHeadElt);\n                        }\n                    }\n                }\n            }\n\n            // Push the remaining new head elements in the Map into the\n            // nodes to append to the head tag\n            nodesToAppend.push(...srcToNewHeadNodes.values());\n\n            let promises = [];\n            for (const newNode of nodesToAppend) {\n                let newElt = document.createRange().createContextualFragment(newNode.outerHTML).firstChild;\n                if (ctx.callbacks.beforeNodeAdded(newElt) !== false) {\n                    if (newElt.href || newElt.src) {\n                        let resolve = null;\n                        let promise = new Promise(function (_resolve) {\n                            resolve = _resolve;\n                        });\n                        newElt.addEventListener('load', function () {\n                            resolve();\n                        });\n                        promises.push(promise);\n                    }\n                    currentHead.appendChild(newElt);\n                    ctx.callbacks.afterNodeAdded(newElt);\n                    added.push(newElt);\n                }\n            }\n\n            // remove all removed elements, after we have appended the new elements to avoid\n            // additional network requests for things like style sheets\n            for (const removedElement of removed) {\n                if (ctx.callbacks.beforeNodeRemoved(removedElement) !== false) {\n                    currentHead.removeChild(removedElement);\n                    ctx.callbacks.afterNodeRemoved(removedElement);\n                }\n            }\n\n            ctx.head.afterHeadMorphed(currentHead, {added: added, kept: preserved, removed: removed});\n            return promises;\n        }\n\n        function noOp() {\n        }\n\n        /*\n          Deep merges the config object and the Idiomoroph.defaults object to\n          produce a final configuration object\n         */\n        function mergeDefaults(config) {\n            let finalConfig = {};\n            // copy top level stuff into final config\n            Object.assign(finalConfig, defaults);\n            Object.assign(finalConfig, config);\n\n            // copy callbacks into final config (do this to deep merge the callbacks)\n            finalConfig.callbacks = {};\n            Object.assign(finalConfig.callbacks, defaults.callbacks);\n            Object.assign(finalConfig.callbacks, config.callbacks);\n\n            // copy head config into final config  (do this to deep merge the head)\n            finalConfig.head = {};\n            Object.assign(finalConfig.head, defaults.head);\n            Object.assign(finalConfig.head, config.head);\n            return finalConfig;\n        }\n\n        function createMorphContext(oldNode, newContent, config) {\n            config = mergeDefaults(config);\n            return {\n                target: oldNode,\n                newContent: newContent,\n                config: config,\n                morphStyle: config.morphStyle,\n                ignoreActive: config.ignoreActive,\n                ignoreActiveValue: config.ignoreActiveValue,\n                idMap: createIdMap(oldNode, newContent),\n                deadIds: new Set(),\n                callbacks: config.callbacks,\n                head: config.head\n            }\n        }\n\n        function isIdSetMatch(node1, node2, ctx) {\n            if (node1 == null || node2 == null) {\n                return false;\n            }\n            if (node1.nodeType === node2.nodeType && node1.tagName === node2.tagName) {\n                if (node1.id !== \"\" && node1.id === node2.id) {\n                    return true;\n                } else {\n                    return getIdIntersectionCount(ctx, node1, node2) > 0;\n                }\n            }\n            return false;\n        }\n\n        function isSoftMatch(node1, node2) {\n            if (node1 == null || node2 == null) {\n                return false;\n            }\n            return node1.nodeType === node2.nodeType && node1.tagName === node2.tagName\n        }\n\n        function removeNodesBetween(startInclusive, endExclusive, ctx) {\n            while (startInclusive !== endExclusive) {\n                let tempNode = startInclusive;\n                startInclusive = startInclusive.nextSibling;\n                removeNode(tempNode, ctx);\n            }\n            removeIdsFromConsideration(ctx, endExclusive);\n            return endExclusive.nextSibling;\n        }\n\n        //=============================================================================\n        // Scans forward from the insertionPoint in the old parent looking for a potential id match\n        // for the newChild.  We stop if we find a potential id match for the new child OR\n        // if the number of potential id matches we are discarding is greater than the\n        // potential id matches for the new child\n        //=============================================================================\n        function findIdSetMatch(newContent, oldParent, newChild, insertionPoint, ctx) {\n\n            // max id matches we are willing to discard in our search\n            let newChildPotentialIdCount = getIdIntersectionCount(ctx, newChild, oldParent);\n\n            let potentialMatch = null;\n\n            // only search forward if there is a possibility of an id match\n            if (newChildPotentialIdCount > 0) {\n                let potentialMatch = insertionPoint;\n                // if there is a possibility of an id match, scan forward\n                // keep track of the potential id match count we are discarding (the\n                // newChildPotentialIdCount must be greater than this to make it likely\n                // worth it)\n                let otherMatchCount = 0;\n                while (potentialMatch != null) {\n\n                    // If we have an id match, return the current potential match\n                    if (isIdSetMatch(newChild, potentialMatch, ctx)) {\n                        return potentialMatch;\n                    }\n\n                    // computer the other potential matches of this new content\n                    otherMatchCount += getIdIntersectionCount(ctx, potentialMatch, newContent);\n                    if (otherMatchCount > newChildPotentialIdCount) {\n                        // if we have more potential id matches in _other_ content, we\n                        // do not have a good candidate for an id match, so return null\n                        return null;\n                    }\n\n                    // advanced to the next old content child\n                    potentialMatch = potentialMatch.nextSibling;\n                }\n            }\n            return potentialMatch;\n        }\n\n        //=============================================================================\n        // Scans forward from the insertionPoint in the old parent looking for a potential soft match\n        // for the newChild.  We stop if we find a potential soft match for the new child OR\n        // if we find a potential id match in the old parents children OR if we find two\n        // potential soft matches for the next two pieces of new content\n        //=============================================================================\n        function findSoftMatch(newContent, oldParent, newChild, insertionPoint, ctx) {\n\n            let potentialSoftMatch = insertionPoint;\n            let nextSibling = newChild.nextSibling;\n            let siblingSoftMatchCount = 0;\n\n            while (potentialSoftMatch != null) {\n\n                if (getIdIntersectionCount(ctx, potentialSoftMatch, newContent) > 0) {\n                    // the current potential soft match has a potential id set match with the remaining new\n                    // content so bail out of looking\n                    return null;\n                }\n\n                // if we have a soft match with the current node, return it\n                if (isSoftMatch(newChild, potentialSoftMatch)) {\n                    return potentialSoftMatch;\n                }\n\n                if (isSoftMatch(nextSibling, potentialSoftMatch)) {\n                    // the next new node has a soft match with this node, so\n                    // increment the count of future soft matches\n                    siblingSoftMatchCount++;\n                    nextSibling = nextSibling.nextSibling;\n\n                    // If there are two future soft matches, bail to allow the siblings to soft match\n                    // so that we don't consume future soft matches for the sake of the current node\n                    if (siblingSoftMatchCount >= 2) {\n                        return null;\n                    }\n                }\n\n                // advanced to the next old content child\n                potentialSoftMatch = potentialSoftMatch.nextSibling;\n            }\n\n            return potentialSoftMatch;\n        }\n\n        function parseContent(newContent) {\n            let parser = new DOMParser();\n\n            // remove svgs to avoid false-positive matches on head, etc.\n            let contentWithSvgsRemoved = newContent.replace(/<svg(\\s[^>]*>|>)([\\s\\S]*?)<\\/svg>/gim, '');\n\n            // if the newContent contains a html, head or body tag, we can simply parse it w/o wrapping\n            if (contentWithSvgsRemoved.match(/<\\/html>/) || contentWithSvgsRemoved.match(/<\\/head>/) || contentWithSvgsRemoved.match(/<\\/body>/)) {\n                let content = parser.parseFromString(newContent, \"text/html\");\n                // if it is a full HTML document, return the document itself as the parent container\n                if (contentWithSvgsRemoved.match(/<\\/html>/)) {\n                    content.generatedByIdiomorph = true;\n                    return content;\n                } else {\n                    // otherwise return the html element as the parent container\n                    let htmlElement = content.firstChild;\n                    if (htmlElement) {\n                        htmlElement.generatedByIdiomorph = true;\n                        return htmlElement;\n                    } else {\n                        return null;\n                    }\n                }\n            } else {\n                // if it is partial HTML, wrap it in a template tag to provide a parent element and also to help\n                // deal with touchy tags like tr, tbody, etc.\n                let responseDoc = parser.parseFromString(\"<body><template>\" + newContent + \"</template></body>\", \"text/html\");\n                let content = responseDoc.body.querySelector('template').content;\n                content.generatedByIdiomorph = true;\n                return content\n            }\n        }\n\n        function normalizeContent(newContent) {\n            if (newContent == null) {\n                // noinspection UnnecessaryLocalVariableJS\n                const dummyParent = document.createElement('div');\n                return dummyParent;\n            } else if (newContent.generatedByIdiomorph) {\n                // the template tag created by idiomorph parsing can serve as a dummy parent\n                return newContent;\n            } else if (newContent instanceof Node) {\n                // a single node is added as a child to a dummy parent\n                const dummyParent = document.createElement('div');\n                dummyParent.append(newContent);\n                return dummyParent;\n            } else {\n                // all nodes in the array or HTMLElement collection are consolidated under\n                // a single dummy parent element\n                const dummyParent = document.createElement('div');\n                for (const elt of [...newContent]) {\n                    dummyParent.append(elt);\n                }\n                return dummyParent;\n            }\n        }\n\n        function insertSiblings(previousSibling, morphedNode, nextSibling) {\n            let stack = [];\n            let added = [];\n            while (previousSibling != null) {\n                stack.push(previousSibling);\n                previousSibling = previousSibling.previousSibling;\n            }\n            while (stack.length > 0) {\n                let node = stack.pop();\n                added.push(node); // push added preceding siblings on in order and insert\n                morphedNode.parentElement.insertBefore(node, morphedNode);\n            }\n            added.push(morphedNode);\n            while (nextSibling != null) {\n                stack.push(nextSibling);\n                added.push(nextSibling); // here we are going in order, so push on as we scan, rather than add\n                nextSibling = nextSibling.nextSibling;\n            }\n            while (stack.length > 0) {\n                morphedNode.parentElement.insertBefore(stack.pop(), morphedNode.nextSibling);\n            }\n            return added;\n        }\n\n        function findBestNodeMatch(newContent, oldNode, ctx) {\n            let currentElement;\n            currentElement = newContent.firstChild;\n            let bestElement = currentElement;\n            let score = 0;\n            while (currentElement) {\n                let newScore = scoreElement(currentElement, oldNode, ctx);\n                if (newScore > score) {\n                    bestElement = currentElement;\n                    score = newScore;\n                }\n                currentElement = currentElement.nextSibling;\n            }\n            return bestElement;\n        }\n\n        function scoreElement(node1, node2, ctx) {\n            if (isSoftMatch(node1, node2)) {\n                return .5 + getIdIntersectionCount(ctx, node1, node2);\n            }\n            return 0;\n        }\n\n        function removeNode(tempNode, ctx) {\n            removeIdsFromConsideration(ctx, tempNode);\n            if (ctx.callbacks.beforeNodeRemoved(tempNode) === false) return;\n\n            tempNode.remove();\n            ctx.callbacks.afterNodeRemoved(tempNode);\n        }\n\n        //=============================================================================\n        // ID Set Functions\n        //=============================================================================\n\n        function isIdInConsideration(ctx, id) {\n            return !ctx.deadIds.has(id);\n        }\n\n        function idIsWithinNode(ctx, id, targetNode) {\n            let idSet = ctx.idMap.get(targetNode) || EMPTY_SET;\n            return idSet.has(id);\n        }\n\n        function removeIdsFromConsideration(ctx, node) {\n            let idSet = ctx.idMap.get(node) || EMPTY_SET;\n            for (const id of idSet) {\n                ctx.deadIds.add(id);\n            }\n        }\n\n        function getIdIntersectionCount(ctx, node1, node2) {\n            let sourceSet = ctx.idMap.get(node1) || EMPTY_SET;\n            let matchCount = 0;\n            for (const id of sourceSet) {\n                // a potential match is an id in the source and potentialIdsSet, but\n                // that has not already been merged into the DOM\n                if (isIdInConsideration(ctx, id) && idIsWithinNode(ctx, id, node2)) {\n                    ++matchCount;\n                }\n            }\n            return matchCount;\n        }\n\n        /**\n         * A bottom up algorithm that finds all elements with ids inside of the node\n         * argument and populates id sets for those nodes and all their parents, generating\n         * a set of ids contained within all nodes for the entire hierarchy in the DOM\n         *\n         * @param node {Element}\n         * @param {Map<Node, Set<String>>} idMap\n         */\n        function populateIdMapForNode(node, idMap) {\n            let nodeParent = node.parentElement;\n            // find all elements with an id property\n            let idElements = node.querySelectorAll('[id]');\n            for (const elt of idElements) {\n                let current = elt;\n                // walk up the parent hierarchy of that element, adding the id\n                // of element to the parent's id set\n                while (current !== nodeParent && current != null) {\n                    let idSet = idMap.get(current);\n                    // if the id set doesn't exist, create it and insert it in the  map\n                    if (idSet == null) {\n                        idSet = new Set();\n                        idMap.set(current, idSet);\n                    }\n                    idSet.add(elt.id);\n                    current = current.parentElement;\n                }\n            }\n        }\n\n        /**\n         * This function computes a map of nodes to all ids contained within that node (inclusive of the\n         * node).  This map can be used to ask if two nodes have intersecting sets of ids, which allows\n         * for a looser definition of \"matching\" than tradition id matching, and allows child nodes\n         * to contribute to a parent nodes matching.\n         *\n         * @param {Element} oldContent  the old content that will be morphed\n         * @param {Element} newContent  the new content to morph to\n         * @returns {Map<Node, Set<String>>} a map of nodes to id sets for the\n         */\n        function createIdMap(oldContent, newContent) {\n            let idMap = new Map();\n            populateIdMapForNode(oldContent, idMap);\n            populateIdMapForNode(newContent, idMap);\n            return idMap;\n        }\n\n        //=============================================================================\n        // This is what ends up becoming the Idiomorph global object\n        //=============================================================================\n        return {\n            morph,\n            defaults\n        }\n    })();\n\nfunction normalizeAttributesForComparison(element) {\n    const isFileInput = element instanceof HTMLInputElement && element.type === 'file';\n    if (!isFileInput) {\n        if ('value' in element) {\n            element.setAttribute('value', element.value);\n        }\n        else if (element.hasAttribute('value')) {\n            element.setAttribute('value', '');\n        }\n    }\n    Array.from(element.children).forEach((child) => {\n        normalizeAttributesForComparison(child);\n    });\n}\n\nconst syncAttributes = (fromEl, toEl) => {\n    for (let i = 0; i < fromEl.attributes.length; i++) {\n        const attr = fromEl.attributes[i];\n        toEl.setAttribute(attr.name, attr.value);\n    }\n};\nfunction executeMorphdom(rootFromElement, rootToElement, modifiedFieldElements, getElementValue, externalMutationTracker) {\n    const originalElementIdsToSwapAfter = [];\n    const originalElementsToPreserve = new Map();\n    const markElementAsNeedingPostMorphSwap = (id, replaceWithClone) => {\n        const oldElement = originalElementsToPreserve.get(id);\n        if (!(oldElement instanceof HTMLElement)) {\n            throw new Error(`Original element with id ${id} not found`);\n        }\n        originalElementIdsToSwapAfter.push(id);\n        if (!replaceWithClone) {\n            return null;\n        }\n        const clonedOldElement = cloneHTMLElement(oldElement);\n        oldElement.replaceWith(clonedOldElement);\n        return clonedOldElement;\n    };\n    rootToElement.querySelectorAll('[data-live-preserve]').forEach((newElement) => {\n        const id = newElement.id;\n        if (!id) {\n            throw new Error('The data-live-preserve attribute requires an id attribute to be set on the element');\n        }\n        const oldElement = rootFromElement.querySelector(`#${id}`);\n        if (!(oldElement instanceof HTMLElement)) {\n            throw new Error(`The element with id \"${id}\" was not found in the original HTML`);\n        }\n        newElement.removeAttribute('data-live-preserve');\n        originalElementsToPreserve.set(id, oldElement);\n        syncAttributes(newElement, oldElement);\n    });\n    Idiomorph.morph(rootFromElement, rootToElement, {\n        callbacks: {\n            beforeNodeMorphed: (fromEl, toEl) => {\n                if (!(fromEl instanceof Element) || !(toEl instanceof Element)) {\n                    return true;\n                }\n                if (fromEl === rootFromElement) {\n                    return true;\n                }\n                if (fromEl.id && originalElementsToPreserve.has(fromEl.id)) {\n                    if (fromEl.id === toEl.id) {\n                        return false;\n                    }\n                    const clonedFromEl = markElementAsNeedingPostMorphSwap(fromEl.id, true);\n                    if (!clonedFromEl) {\n                        throw new Error('missing clone');\n                    }\n                    Idiomorph.morph(clonedFromEl, toEl);\n                    return false;\n                }\n                if (fromEl instanceof HTMLElement && toEl instanceof HTMLElement) {\n                    if (typeof fromEl.__x !== 'undefined') {\n                        if (!window.Alpine) {\n                            throw new Error('Unable to access Alpine.js though the global window.Alpine variable. Please make sure Alpine.js is loaded before Symfony UX LiveComponent.');\n                        }\n                        if (typeof window.Alpine.morph !== 'function') {\n                            throw new Error('Unable to access Alpine.js morph function. Please make sure the Alpine.js Morph plugin is installed and loaded, see https://alpinejs.dev/plugins/morph for more information.');\n                        }\n                        window.Alpine.morph(fromEl.__x, toEl);\n                    }\n                    if (externalMutationTracker.wasElementAdded(fromEl)) {\n                        fromEl.insertAdjacentElement('afterend', toEl);\n                        return false;\n                    }\n                    if (modifiedFieldElements.includes(fromEl)) {\n                        setValueOnElement(toEl, getElementValue(fromEl));\n                    }\n                    if (fromEl === document.activeElement &&\n                        fromEl !== document.body &&\n                        null !== getModelDirectiveFromElement(fromEl, false)) {\n                        setValueOnElement(toEl, getElementValue(fromEl));\n                    }\n                    const elementChanges = externalMutationTracker.getChangedElement(fromEl);\n                    if (elementChanges) {\n                        elementChanges.applyToElement(toEl);\n                    }\n                    if (fromEl.nodeName.toUpperCase() !== 'OPTION' && fromEl.isEqualNode(toEl)) {\n                        const normalizedFromEl = cloneHTMLElement(fromEl);\n                        normalizeAttributesForComparison(normalizedFromEl);\n                        const normalizedToEl = cloneHTMLElement(toEl);\n                        normalizeAttributesForComparison(normalizedToEl);\n                        if (normalizedFromEl.isEqualNode(normalizedToEl)) {\n                            return false;\n                        }\n                    }\n                }\n                if (fromEl.hasAttribute('data-skip-morph') || (fromEl.id && fromEl.id !== toEl.id)) {\n                    fromEl.innerHTML = toEl.innerHTML;\n                    return true;\n                }\n                if (fromEl.parentElement?.hasAttribute('data-skip-morph')) {\n                    return false;\n                }\n                return !fromEl.hasAttribute('data-live-ignore');\n            },\n            beforeNodeRemoved(node) {\n                if (!(node instanceof HTMLElement)) {\n                    return true;\n                }\n                if (node.id && originalElementsToPreserve.has(node.id)) {\n                    markElementAsNeedingPostMorphSwap(node.id, false);\n                    return true;\n                }\n                if (externalMutationTracker.wasElementAdded(node)) {\n                    return false;\n                }\n                return !node.hasAttribute('data-live-ignore');\n            },\n        },\n    });\n    originalElementIdsToSwapAfter.forEach((id) => {\n        const newElement = rootFromElement.querySelector(`#${id}`);\n        const originalElement = originalElementsToPreserve.get(id);\n        if (!(newElement instanceof HTMLElement) || !(originalElement instanceof HTMLElement)) {\n            throw new Error('Missing elements.');\n        }\n        newElement.replaceWith(originalElement);\n    });\n}\n\nclass UnsyncedInputsTracker {\n    constructor(component, modelElementResolver) {\n        this.elementEventListeners = [\n            { event: 'input', callback: (event) => this.handleInputEvent(event) },\n        ];\n        this.component = component;\n        this.modelElementResolver = modelElementResolver;\n        this.unsyncedInputs = new UnsyncedInputContainer();\n    }\n    activate() {\n        this.elementEventListeners.forEach(({ event, callback }) => {\n            this.component.element.addEventListener(event, callback);\n        });\n    }\n    deactivate() {\n        this.elementEventListeners.forEach(({ event, callback }) => {\n            this.component.element.removeEventListener(event, callback);\n        });\n    }\n    markModelAsSynced(modelName) {\n        this.unsyncedInputs.markModelAsSynced(modelName);\n    }\n    handleInputEvent(event) {\n        const target = event.target;\n        if (!target) {\n            return;\n        }\n        this.updateModelFromElement(target);\n    }\n    updateModelFromElement(element) {\n        if (!elementBelongsToThisComponent(element, this.component)) {\n            return;\n        }\n        if (!(element instanceof HTMLElement)) {\n            throw new Error('Could not update model for non HTMLElement');\n        }\n        const modelName = this.modelElementResolver.getModelName(element);\n        this.unsyncedInputs.add(element, modelName);\n    }\n    getUnsyncedInputs() {\n        return this.unsyncedInputs.allUnsyncedInputs();\n    }\n    getUnsyncedModels() {\n        return Array.from(this.unsyncedInputs.getUnsyncedModelNames());\n    }\n    resetUnsyncedFields() {\n        this.unsyncedInputs.resetUnsyncedFields();\n    }\n}\nclass UnsyncedInputContainer {\n    constructor() {\n        this.unsyncedNonModelFields = [];\n        this.unsyncedModelNames = [];\n        this.unsyncedModelFields = new Map();\n    }\n    add(element, modelName = null) {\n        if (modelName) {\n            this.unsyncedModelFields.set(modelName, element);\n            if (!this.unsyncedModelNames.includes(modelName)) {\n                this.unsyncedModelNames.push(modelName);\n            }\n            return;\n        }\n        this.unsyncedNonModelFields.push(element);\n    }\n    resetUnsyncedFields() {\n        this.unsyncedModelFields.forEach((value, key) => {\n            if (!this.unsyncedModelNames.includes(key)) {\n                this.unsyncedModelFields.delete(key);\n            }\n        });\n    }\n    allUnsyncedInputs() {\n        return [...this.unsyncedNonModelFields, ...this.unsyncedModelFields.values()];\n    }\n    markModelAsSynced(modelName) {\n        const index = this.unsyncedModelNames.indexOf(modelName);\n        if (index !== -1) {\n            this.unsyncedModelNames.splice(index, 1);\n        }\n    }\n    getUnsyncedModelNames() {\n        return this.unsyncedModelNames;\n    }\n}\n\nfunction getDeepData(data, propertyPath) {\n    const { currentLevelData, finalKey } = parseDeepData(data, propertyPath);\n    if (currentLevelData === undefined) {\n        return undefined;\n    }\n    return currentLevelData[finalKey];\n}\nconst parseDeepData = (data, propertyPath) => {\n    const finalData = JSON.parse(JSON.stringify(data));\n    let currentLevelData = finalData;\n    const parts = propertyPath.split('.');\n    for (let i = 0; i < parts.length - 1; i++) {\n        currentLevelData = currentLevelData[parts[i]];\n    }\n    const finalKey = parts[parts.length - 1];\n    return {\n        currentLevelData,\n        finalData,\n        finalKey,\n        parts,\n    };\n};\n\nclass ValueStore {\n    constructor(props) {\n        this.props = {};\n        this.dirtyProps = {};\n        this.pendingProps = {};\n        this.updatedPropsFromParent = {};\n        this.props = props;\n    }\n    get(name) {\n        const normalizedName = normalizeModelName(name);\n        if (this.dirtyProps[normalizedName] !== undefined) {\n            return this.dirtyProps[normalizedName];\n        }\n        if (this.pendingProps[normalizedName] !== undefined) {\n            return this.pendingProps[normalizedName];\n        }\n        if (this.props[normalizedName] !== undefined) {\n            return this.props[normalizedName];\n        }\n        return getDeepData(this.props, normalizedName);\n    }\n    has(name) {\n        return this.get(name) !== undefined;\n    }\n    set(name, value) {\n        const normalizedName = normalizeModelName(name);\n        if (this.get(normalizedName) === value) {\n            return false;\n        }\n        this.dirtyProps[normalizedName] = value;\n        return true;\n    }\n    getOriginalProps() {\n        return { ...this.props };\n    }\n    getDirtyProps() {\n        return { ...this.dirtyProps };\n    }\n    getUpdatedPropsFromParent() {\n        return { ...this.updatedPropsFromParent };\n    }\n    flushDirtyPropsToPending() {\n        this.pendingProps = { ...this.dirtyProps };\n        this.dirtyProps = {};\n    }\n    reinitializeAllProps(props) {\n        this.props = props;\n        this.updatedPropsFromParent = {};\n        this.pendingProps = {};\n    }\n    pushPendingPropsBackToDirty() {\n        this.dirtyProps = { ...this.pendingProps, ...this.dirtyProps };\n        this.pendingProps = {};\n    }\n    storeNewPropsFromParent(props) {\n        let changed = false;\n        for (const [key, value] of Object.entries(props)) {\n            const currentValue = this.get(key);\n            if (currentValue !== value) {\n                changed = true;\n            }\n        }\n        if (changed) {\n            this.updatedPropsFromParent = props;\n        }\n        return changed;\n    }\n}\n\nclass Component {\n    constructor(element, name, props, listeners, id, backend, elementDriver) {\n        this.fingerprint = '';\n        this.defaultDebounce = 150;\n        this.backendRequest = null;\n        this.pendingActions = [];\n        this.pendingFiles = {};\n        this.isRequestPending = false;\n        this.requestDebounceTimeout = null;\n        this.element = element;\n        this.name = name;\n        this.backend = backend;\n        this.elementDriver = elementDriver;\n        this.id = id;\n        this.listeners = new Map();\n        listeners.forEach((listener) => {\n            if (!this.listeners.has(listener.event)) {\n                this.listeners.set(listener.event, []);\n            }\n            this.listeners.get(listener.event)?.push(listener.action);\n        });\n        this.valueStore = new ValueStore(props);\n        this.unsyncedInputsTracker = new UnsyncedInputsTracker(this, elementDriver);\n        this.hooks = new HookManager();\n        this.resetPromise();\n        this.externalMutationTracker = new ExternalMutationTracker(this.element, (element) => elementBelongsToThisComponent(element, this));\n        this.externalMutationTracker.start();\n    }\n    addPlugin(plugin) {\n        plugin.attachToComponent(this);\n    }\n    connect() {\n        registerComponent(this);\n        this.hooks.triggerHook('connect', this);\n        this.unsyncedInputsTracker.activate();\n        this.externalMutationTracker.start();\n    }\n    disconnect() {\n        unregisterComponent(this);\n        this.hooks.triggerHook('disconnect', this);\n        this.clearRequestDebounceTimeout();\n        this.unsyncedInputsTracker.deactivate();\n        this.externalMutationTracker.stop();\n    }\n    on(hookName, callback) {\n        this.hooks.register(hookName, callback);\n    }\n    off(hookName, callback) {\n        this.hooks.unregister(hookName, callback);\n    }\n    set(model, value, reRender = false, debounce = false) {\n        const promise = this.nextRequestPromise;\n        const modelName = normalizeModelName(model);\n        if (!this.valueStore.has(modelName)) {\n            throw new Error(`Invalid model name \"${model}\".`);\n        }\n        const isChanged = this.valueStore.set(modelName, value);\n        this.hooks.triggerHook('model:set', model, value, this);\n        this.unsyncedInputsTracker.markModelAsSynced(modelName);\n        if (reRender && isChanged) {\n            this.debouncedStartRequest(debounce);\n        }\n        return promise;\n    }\n    getData(model) {\n        const modelName = normalizeModelName(model);\n        if (!this.valueStore.has(modelName)) {\n            throw new Error(`Invalid model \"${model}\".`);\n        }\n        return this.valueStore.get(modelName);\n    }\n    action(name, args = {}, debounce = false) {\n        const promise = this.nextRequestPromise;\n        this.pendingActions.push({\n            name,\n            args,\n        });\n        this.debouncedStartRequest(debounce);\n        return promise;\n    }\n    files(key, input) {\n        this.pendingFiles[key] = input;\n    }\n    render() {\n        const promise = this.nextRequestPromise;\n        this.tryStartingRequest();\n        return promise;\n    }\n    getUnsyncedModels() {\n        return this.unsyncedInputsTracker.getUnsyncedModels();\n    }\n    emit(name, data, onlyMatchingComponentsNamed = null) {\n        this.performEmit(name, data, false, onlyMatchingComponentsNamed);\n    }\n    emitUp(name, data, onlyMatchingComponentsNamed = null) {\n        this.performEmit(name, data, true, onlyMatchingComponentsNamed);\n    }\n    emitSelf(name, data) {\n        this.doEmit(name, data);\n    }\n    performEmit(name, data, emitUp, matchingName) {\n        const components = findComponents(this, emitUp, matchingName);\n        components.forEach((component) => {\n            component.doEmit(name, data);\n        });\n    }\n    doEmit(name, data) {\n        if (!this.listeners.has(name)) {\n            return;\n        }\n        const actions = this.listeners.get(name) || [];\n        actions.forEach((action) => {\n            this.action(action, data, 1);\n        });\n    }\n    isTurboEnabled() {\n        return typeof Turbo !== 'undefined' && !this.element.closest('[data-turbo=\"false\"]');\n    }\n    tryStartingRequest() {\n        if (!this.backendRequest) {\n            this.performRequest();\n            return;\n        }\n        this.isRequestPending = true;\n    }\n    performRequest() {\n        const thisPromiseResolve = this.nextRequestPromiseResolve;\n        this.resetPromise();\n        this.unsyncedInputsTracker.resetUnsyncedFields();\n        const filesToSend = {};\n        for (const [key, value] of Object.entries(this.pendingFiles)) {\n            if (value.files) {\n                filesToSend[key] = value.files;\n            }\n        }\n        const requestConfig = {\n            props: this.valueStore.getOriginalProps(),\n            actions: this.pendingActions,\n            updated: this.valueStore.getDirtyProps(),\n            children: {},\n            updatedPropsFromParent: this.valueStore.getUpdatedPropsFromParent(),\n            files: filesToSend,\n        };\n        this.hooks.triggerHook('request:started', requestConfig);\n        this.backendRequest = this.backend.makeRequest(requestConfig.props, requestConfig.actions, requestConfig.updated, requestConfig.children, requestConfig.updatedPropsFromParent, requestConfig.files);\n        this.hooks.triggerHook('loading.state:started', this.element, this.backendRequest);\n        this.pendingActions = [];\n        this.valueStore.flushDirtyPropsToPending();\n        this.isRequestPending = false;\n        this.backendRequest.promise.then(async (response) => {\n            const backendResponse = new BackendResponse(response);\n            const html = await backendResponse.getBody();\n            for (const input of Object.values(this.pendingFiles)) {\n                input.value = '';\n            }\n            const headers = backendResponse.response.headers;\n            if (!headers.get('Content-Type')?.includes('application/vnd.live-component+html') &&\n                !headers.get('X-Live-Redirect')) {\n                const controls = { displayError: true };\n                this.valueStore.pushPendingPropsBackToDirty();\n                this.hooks.triggerHook('response:error', backendResponse, controls);\n                if (controls.displayError) {\n                    this.renderError(html);\n                }\n                this.backendRequest = null;\n                thisPromiseResolve(backendResponse);\n                return response;\n            }\n            this.processRerender(html, backendResponse);\n            this.backendRequest = null;\n            thisPromiseResolve(backendResponse);\n            if (this.isRequestPending) {\n                this.isRequestPending = false;\n                this.performRequest();\n            }\n            return response;\n        });\n    }\n    processRerender(html, backendResponse) {\n        const controls = { shouldRender: true };\n        this.hooks.triggerHook('render:started', html, backendResponse, controls);\n        if (!controls.shouldRender) {\n            return;\n        }\n        if (backendResponse.response.headers.get('Location')) {\n            if (this.isTurboEnabled()) {\n                Turbo.visit(backendResponse.response.headers.get('Location'));\n            }\n            else {\n                window.location.href = backendResponse.response.headers.get('Location') || '';\n            }\n            return;\n        }\n        this.hooks.triggerHook('loading.state:finished', this.element);\n        const modifiedModelValues = {};\n        Object.keys(this.valueStore.getDirtyProps()).forEach((modelName) => {\n            modifiedModelValues[modelName] = this.valueStore.get(modelName);\n        });\n        let newElement;\n        try {\n            newElement = htmlToElement(html);\n            if (!newElement.matches('[data-controller~=live]')) {\n                throw new Error('A live component template must contain a single root controller element.');\n            }\n        }\n        catch (error) {\n            console.error(`There was a problem with the '${this.name}' component HTML returned:`, {\n                id: this.id,\n            });\n            throw error;\n        }\n        this.externalMutationTracker.handlePendingChanges();\n        this.externalMutationTracker.stop();\n        executeMorphdom(this.element, newElement, this.unsyncedInputsTracker.getUnsyncedInputs(), (element) => getValueFromElement(element, this.valueStore), this.externalMutationTracker);\n        this.externalMutationTracker.start();\n        const newProps = this.elementDriver.getComponentProps();\n        this.valueStore.reinitializeAllProps(newProps);\n        const eventsToEmit = this.elementDriver.getEventsToEmit();\n        const browserEventsToDispatch = this.elementDriver.getBrowserEventsToDispatch();\n        Object.keys(modifiedModelValues).forEach((modelName) => {\n            this.valueStore.set(modelName, modifiedModelValues[modelName]);\n        });\n        eventsToEmit.forEach(({ event, data, target, componentName }) => {\n            if (target === 'up') {\n                this.emitUp(event, data, componentName);\n                return;\n            }\n            if (target === 'self') {\n                this.emitSelf(event, data);\n                return;\n            }\n            this.emit(event, data, componentName);\n        });\n        browserEventsToDispatch.forEach(({ event, payload }) => {\n            this.element.dispatchEvent(new CustomEvent(event, {\n                detail: payload,\n                bubbles: true,\n            }));\n        });\n        this.hooks.triggerHook('render:finished', this);\n    }\n    calculateDebounce(debounce) {\n        if (debounce === true) {\n            return this.defaultDebounce;\n        }\n        if (debounce === false) {\n            return 0;\n        }\n        return debounce;\n    }\n    clearRequestDebounceTimeout() {\n        if (this.requestDebounceTimeout) {\n            clearTimeout(this.requestDebounceTimeout);\n            this.requestDebounceTimeout = null;\n        }\n    }\n    debouncedStartRequest(debounce) {\n        this.clearRequestDebounceTimeout();\n        this.requestDebounceTimeout = window.setTimeout(() => {\n            this.render();\n        }, this.calculateDebounce(debounce));\n    }\n    renderError(html) {\n        let modal = document.getElementById('live-component-error');\n        if (modal) {\n            modal.innerHTML = '';\n        }\n        else {\n            modal = document.createElement('div');\n            modal.id = 'live-component-error';\n            modal.style.padding = '50px';\n            modal.style.backgroundColor = 'rgba(0, 0, 0, .5)';\n            modal.style.zIndex = '100000';\n            modal.style.position = 'fixed';\n            modal.style.top = '0px';\n            modal.style.bottom = '0px';\n            modal.style.left = '0px';\n            modal.style.right = '0px';\n            modal.style.display = 'flex';\n            modal.style.flexDirection = 'column';\n        }\n        const iframe = document.createElement('iframe');\n        iframe.style.borderRadius = '5px';\n        iframe.style.flexGrow = '1';\n        modal.appendChild(iframe);\n        document.body.prepend(modal);\n        document.body.style.overflow = 'hidden';\n        if (iframe.contentWindow) {\n            iframe.contentWindow.document.open();\n            iframe.contentWindow.document.write(html);\n            iframe.contentWindow.document.close();\n        }\n        const closeModal = (modal) => {\n            if (modal) {\n                modal.outerHTML = '';\n            }\n            document.body.style.overflow = 'visible';\n        };\n        modal.addEventListener('click', () => closeModal(modal));\n        modal.setAttribute('tabindex', '0');\n        modal.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape') {\n                closeModal(modal);\n            }\n        });\n        modal.focus();\n    }\n    resetPromise() {\n        this.nextRequestPromise = new Promise((resolve) => {\n            this.nextRequestPromiseResolve = resolve;\n        });\n    }\n    _updateFromParentProps(props) {\n        const isChanged = this.valueStore.storeNewPropsFromParent(props);\n        if (isChanged) {\n            this.render();\n        }\n    }\n}\nfunction proxifyComponent(component) {\n    return new Proxy(component, {\n        get(component, prop) {\n            if (prop in component || typeof prop !== 'string') {\n                if (typeof component[prop] === 'function') {\n                    const callable = component[prop];\n                    return (...args) => {\n                        return callable.apply(component, args);\n                    };\n                }\n                return Reflect.get(component, prop);\n            }\n            if (component.valueStore.has(prop)) {\n                return component.getData(prop);\n            }\n            return (args) => {\n                return component.action.apply(component, [prop, args]);\n            };\n        },\n        set(target, property, value) {\n            if (property in target) {\n                target[property] = value;\n                return true;\n            }\n            target.set(property, value);\n            return true;\n        },\n    });\n}\n\nclass StimulusElementDriver {\n    constructor(controller) {\n        this.controller = controller;\n    }\n    getModelName(element) {\n        const modelDirective = getModelDirectiveFromElement(element, false);\n        if (!modelDirective) {\n            return null;\n        }\n        return modelDirective.action;\n    }\n    getComponentProps() {\n        return this.controller.propsValue;\n    }\n    getEventsToEmit() {\n        return this.controller.eventsToEmitValue;\n    }\n    getBrowserEventsToDispatch() {\n        return this.controller.eventsToDispatchValue;\n    }\n}\n\nfunction getModelBinding (modelDirective) {\n    let shouldRender = true;\n    let targetEventName = null;\n    let debounce = false;\n    modelDirective.modifiers.forEach((modifier) => {\n        switch (modifier.name) {\n            case 'on':\n                if (!modifier.value) {\n                    throw new Error(`The \"on\" modifier in ${modelDirective.getString()} requires a value - e.g. on(change).`);\n                }\n                if (!['input', 'change'].includes(modifier.value)) {\n                    throw new Error(`The \"on\" modifier in ${modelDirective.getString()} only accepts the arguments \"input\" or \"change\".`);\n                }\n                targetEventName = modifier.value;\n                break;\n            case 'norender':\n                shouldRender = false;\n                break;\n            case 'debounce':\n                debounce = modifier.value ? Number.parseInt(modifier.value) : true;\n                break;\n            default:\n                throw new Error(`Unknown modifier \"${modifier.name}\" in data-model=\"${modelDirective.getString()}\".`);\n        }\n    });\n    const [modelName, innerModelName] = modelDirective.action.split(':');\n    return {\n        modelName,\n        innerModelName: innerModelName || null,\n        shouldRender,\n        debounce,\n        targetEventName,\n    };\n}\n\nclass ChildComponentPlugin {\n    constructor(component) {\n        this.parentModelBindings = [];\n        this.component = component;\n        const modelDirectives = getAllModelDirectiveFromElements(this.component.element);\n        this.parentModelBindings = modelDirectives.map(getModelBinding);\n    }\n    attachToComponent(component) {\n        component.on('request:started', (requestData) => {\n            requestData.children = this.getChildrenFingerprints();\n        });\n        component.on('model:set', (model, value) => {\n            this.notifyParentModelChange(model, value);\n        });\n    }\n    getChildrenFingerprints() {\n        const fingerprints = {};\n        this.getChildren().forEach((child) => {\n            if (!child.id) {\n                throw new Error('missing id');\n            }\n            fingerprints[child.id] = {\n                fingerprint: child.fingerprint,\n                tag: child.element.tagName.toLowerCase(),\n            };\n        });\n        return fingerprints;\n    }\n    notifyParentModelChange(modelName, value) {\n        const parentComponent = findParent(this.component);\n        if (!parentComponent) {\n            return;\n        }\n        this.parentModelBindings.forEach((modelBinding) => {\n            const childModelName = modelBinding.innerModelName || 'value';\n            if (childModelName !== modelName) {\n                return;\n            }\n            parentComponent.set(modelBinding.modelName, value, modelBinding.shouldRender, modelBinding.debounce);\n        });\n    }\n    getChildren() {\n        return findChildren(this.component);\n    }\n}\n\nclass LazyPlugin {\n    constructor() {\n        this.intersectionObserver = null;\n    }\n    attachToComponent(component) {\n        if ('lazy' !== component.element.attributes.getNamedItem('loading')?.value) {\n            return;\n        }\n        component.on('connect', () => {\n            this.getObserver().observe(component.element);\n        });\n        component.on('disconnect', () => {\n            this.intersectionObserver?.unobserve(component.element);\n        });\n    }\n    getObserver() {\n        if (!this.intersectionObserver) {\n            this.intersectionObserver = new IntersectionObserver((entries, observer) => {\n                entries.forEach((entry) => {\n                    if (entry.isIntersecting) {\n                        entry.target.dispatchEvent(new CustomEvent('live:appear'));\n                        observer.unobserve(entry.target);\n                    }\n                });\n            });\n        }\n        return this.intersectionObserver;\n    }\n}\n\nclass LoadingPlugin {\n    attachToComponent(component) {\n        component.on('loading.state:started', (element, request) => {\n            this.startLoading(component, element, request);\n        });\n        component.on('loading.state:finished', (element) => {\n            this.finishLoading(component, element);\n        });\n        this.finishLoading(component, component.element);\n    }\n    startLoading(component, targetElement, backendRequest) {\n        this.handleLoadingToggle(component, true, targetElement, backendRequest);\n    }\n    finishLoading(component, targetElement) {\n        this.handleLoadingToggle(component, false, targetElement, null);\n    }\n    handleLoadingToggle(component, isLoading, targetElement, backendRequest) {\n        if (isLoading) {\n            this.addAttributes(targetElement, ['busy']);\n        }\n        else {\n            this.removeAttributes(targetElement, ['busy']);\n        }\n        this.getLoadingDirectives(component, targetElement).forEach(({ element, directives }) => {\n            if (isLoading) {\n                this.addAttributes(element, ['data-live-is-loading']);\n            }\n            else {\n                this.removeAttributes(element, ['data-live-is-loading']);\n            }\n            directives.forEach((directive) => {\n                this.handleLoadingDirective(element, isLoading, directive, backendRequest);\n            });\n        });\n    }\n    handleLoadingDirective(element, isLoading, directive, backendRequest) {\n        const finalAction = parseLoadingAction(directive.action, isLoading);\n        const targetedActions = [];\n        const targetedModels = [];\n        let delay = 0;\n        const validModifiers = new Map();\n        validModifiers.set('delay', (modifier) => {\n            if (!isLoading) {\n                return;\n            }\n            delay = modifier.value ? Number.parseInt(modifier.value) : 200;\n        });\n        validModifiers.set('action', (modifier) => {\n            if (!modifier.value) {\n                throw new Error(`The \"action\" in data-loading must have an action name - e.g. action(foo). It's missing for \"${directive.getString()}\"`);\n            }\n            targetedActions.push(modifier.value);\n        });\n        validModifiers.set('model', (modifier) => {\n            if (!modifier.value) {\n                throw new Error(`The \"model\" in data-loading must have an action name - e.g. model(foo). It's missing for \"${directive.getString()}\"`);\n            }\n            targetedModels.push(modifier.value);\n        });\n        directive.modifiers.forEach((modifier) => {\n            if (validModifiers.has(modifier.name)) {\n                const callable = validModifiers.get(modifier.name) ?? (() => { });\n                callable(modifier);\n                return;\n            }\n            throw new Error(`Unknown modifier \"${modifier.name}\" used in data-loading=\"${directive.getString()}\". Available modifiers are: ${Array.from(validModifiers.keys()).join(', ')}.`);\n        });\n        if (isLoading &&\n            targetedActions.length > 0 &&\n            backendRequest &&\n            !backendRequest.containsOneOfActions(targetedActions)) {\n            return;\n        }\n        if (isLoading &&\n            targetedModels.length > 0 &&\n            backendRequest &&\n            !backendRequest.areAnyModelsUpdated(targetedModels)) {\n            return;\n        }\n        let loadingDirective;\n        switch (finalAction) {\n            case 'show':\n                loadingDirective = () => this.showElement(element);\n                break;\n            case 'hide':\n                loadingDirective = () => this.hideElement(element);\n                break;\n            case 'addClass':\n                loadingDirective = () => this.addClass(element, directive.args);\n                break;\n            case 'removeClass':\n                loadingDirective = () => this.removeClass(element, directive.args);\n                break;\n            case 'addAttribute':\n                loadingDirective = () => this.addAttributes(element, directive.args);\n                break;\n            case 'removeAttribute':\n                loadingDirective = () => this.removeAttributes(element, directive.args);\n                break;\n            default:\n                throw new Error(`Unknown data-loading action \"${finalAction}\"`);\n        }\n        if (delay) {\n            window.setTimeout(() => {\n                if (backendRequest && !backendRequest.isResolved) {\n                    loadingDirective();\n                }\n            }, delay);\n            return;\n        }\n        loadingDirective();\n    }\n    getLoadingDirectives(component, element) {\n        const loadingDirectives = [];\n        let matchingElements = [...Array.from(element.querySelectorAll('[data-loading]'))];\n        matchingElements = matchingElements.filter((elt) => elementBelongsToThisComponent(elt, component));\n        if (element.hasAttribute('data-loading')) {\n            matchingElements = [element, ...matchingElements];\n        }\n        matchingElements.forEach((element) => {\n            if (!(element instanceof HTMLElement) && !(element instanceof SVGElement)) {\n                throw new Error('Invalid Element Type');\n            }\n            const directives = parseDirectives(element.dataset.loading || 'show');\n            loadingDirectives.push({\n                element,\n                directives,\n            });\n        });\n        return loadingDirectives;\n    }\n    showElement(element) {\n        element.style.display = 'revert';\n    }\n    hideElement(element) {\n        element.style.display = 'none';\n    }\n    addClass(element, classes) {\n        element.classList.add(...combineSpacedArray(classes));\n    }\n    removeClass(element, classes) {\n        element.classList.remove(...combineSpacedArray(classes));\n        if (element.classList.length === 0) {\n            element.removeAttribute('class');\n        }\n    }\n    addAttributes(element, attributes) {\n        attributes.forEach((attribute) => {\n            element.setAttribute(attribute, '');\n        });\n    }\n    removeAttributes(element, attributes) {\n        attributes.forEach((attribute) => {\n            element.removeAttribute(attribute);\n        });\n    }\n}\nconst parseLoadingAction = (action, isLoading) => {\n    switch (action) {\n        case 'show':\n            return isLoading ? 'show' : 'hide';\n        case 'hide':\n            return isLoading ? 'hide' : 'show';\n        case 'addClass':\n            return isLoading ? 'addClass' : 'removeClass';\n        case 'removeClass':\n            return isLoading ? 'removeClass' : 'addClass';\n        case 'addAttribute':\n            return isLoading ? 'addAttribute' : 'removeAttribute';\n        case 'removeAttribute':\n            return isLoading ? 'removeAttribute' : 'addAttribute';\n    }\n    throw new Error(`Unknown data-loading action \"${action}\"`);\n};\n\nclass PageUnloadingPlugin {\n    constructor() {\n        this.isConnected = false;\n    }\n    attachToComponent(component) {\n        component.on('render:started', (html, response, controls) => {\n            if (!this.isConnected) {\n                controls.shouldRender = false;\n            }\n        });\n        component.on('connect', () => {\n            this.isConnected = true;\n        });\n        component.on('disconnect', () => {\n            this.isConnected = false;\n        });\n    }\n}\n\nclass PollingDirector {\n    constructor(component) {\n        this.isPollingActive = true;\n        this.pollingIntervals = [];\n        this.component = component;\n    }\n    addPoll(actionName, duration) {\n        this.polls.push({ actionName, duration });\n        if (this.isPollingActive) {\n            this.initiatePoll(actionName, duration);\n        }\n    }\n    startAllPolling() {\n        if (this.isPollingActive) {\n            return;\n        }\n        this.isPollingActive = true;\n        this.polls.forEach(({ actionName, duration }) => {\n            this.initiatePoll(actionName, duration);\n        });\n    }\n    stopAllPolling() {\n        this.isPollingActive = false;\n        this.pollingIntervals.forEach((interval) => {\n            clearInterval(interval);\n        });\n    }\n    clearPolling() {\n        this.stopAllPolling();\n        this.polls = [];\n        this.startAllPolling();\n    }\n    initiatePoll(actionName, duration) {\n        let callback;\n        if (actionName === '$render') {\n            callback = () => {\n                this.component.render();\n            };\n        }\n        else {\n            callback = () => {\n                this.component.action(actionName, {}, 0);\n            };\n        }\n        const timer = window.setInterval(() => {\n            callback();\n        }, duration);\n        this.pollingIntervals.push(timer);\n    }\n}\n\nclass PollingPlugin {\n    attachToComponent(component) {\n        this.element = component.element;\n        this.pollingDirector = new PollingDirector(component);\n        this.initializePolling();\n        component.on('connect', () => {\n            this.pollingDirector.startAllPolling();\n        });\n        component.on('disconnect', () => {\n            this.pollingDirector.stopAllPolling();\n        });\n        component.on('render:finished', () => {\n            this.initializePolling();\n        });\n    }\n    addPoll(actionName, duration) {\n        this.pollingDirector.addPoll(actionName, duration);\n    }\n    clearPolling() {\n        this.pollingDirector.clearPolling();\n    }\n    initializePolling() {\n        this.clearPolling();\n        if (this.element.dataset.poll === undefined) {\n            return;\n        }\n        const rawPollConfig = this.element.dataset.poll;\n        const directives = parseDirectives(rawPollConfig || '$render');\n        directives.forEach((directive) => {\n            let duration = 2000;\n            directive.modifiers.forEach((modifier) => {\n                switch (modifier.name) {\n                    case 'delay':\n                        if (modifier.value) {\n                            duration = Number.parseInt(modifier.value);\n                        }\n                        break;\n                    default:\n                        console.warn(`Unknown modifier \"${modifier.name}\" in data-poll \"${rawPollConfig}\".`);\n                }\n            });\n            this.addPoll(directive.action, duration);\n        });\n    }\n}\n\nfunction isValueEmpty(value) {\n    if (null === value || value === '' || undefined === value || (Array.isArray(value) && value.length === 0)) {\n        return true;\n    }\n    if (typeof value !== 'object') {\n        return false;\n    }\n    for (const key of Object.keys(value)) {\n        if (!isValueEmpty(value[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction toQueryString(data) {\n    const buildQueryStringEntries = (data, entries = {}, baseKey = '') => {\n        Object.entries(data).forEach(([iKey, iValue]) => {\n            const key = baseKey === '' ? iKey : `${baseKey}[${iKey}]`;\n            if ('' === baseKey && isValueEmpty(iValue)) {\n                entries[key] = '';\n            }\n            else if (null !== iValue) {\n                if (typeof iValue === 'object') {\n                    entries = { ...entries, ...buildQueryStringEntries(iValue, entries, key) };\n                }\n                else {\n                    entries[key] = encodeURIComponent(iValue)\n                        .replace(/%20/g, '+')\n                        .replace(/%2C/g, ',');\n                }\n            }\n        });\n        return entries;\n    };\n    const entries = buildQueryStringEntries(data);\n    return Object.entries(entries)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('&');\n}\nfunction fromQueryString(search) {\n    search = search.replace('?', '');\n    if (search === '')\n        return {};\n    const insertDotNotatedValueIntoData = (key, value, data) => {\n        const [first, second, ...rest] = key.split('.');\n        if (!second) {\n            data[key] = value;\n            return value;\n        }\n        if (data[first] === undefined) {\n            data[first] = Number.isNaN(Number.parseInt(second)) ? {} : [];\n        }\n        insertDotNotatedValueIntoData([second, ...rest].join('.'), value, data[first]);\n    };\n    const entries = search.split('&').map((i) => i.split('='));\n    const data = {};\n    entries.forEach(([key, value]) => {\n        value = decodeURIComponent(value.replace(/\\+/g, '%20'));\n        if (!key.includes('[')) {\n            data[key] = value;\n        }\n        else {\n            if ('' === value)\n                return;\n            const dotNotatedKey = key.replace(/\\[/g, '.').replace(/]/g, '');\n            insertDotNotatedValueIntoData(dotNotatedKey, value, data);\n        }\n    });\n    return data;\n}\nclass UrlUtils extends URL {\n    has(key) {\n        const data = this.getData();\n        return Object.keys(data).includes(key);\n    }\n    set(key, value) {\n        const data = this.getData();\n        data[key] = value;\n        this.setData(data);\n    }\n    get(key) {\n        return this.getData()[key];\n    }\n    remove(key) {\n        const data = this.getData();\n        delete data[key];\n        this.setData(data);\n    }\n    getData() {\n        if (!this.search) {\n            return {};\n        }\n        return fromQueryString(this.search);\n    }\n    setData(data) {\n        this.search = toQueryString(data);\n    }\n}\nclass HistoryStrategy {\n    static replace(url) {\n        history.replaceState(history.state, '', url);\n    }\n}\n\nclass QueryStringPlugin {\n    constructor(mapping) {\n        this.mapping = mapping;\n    }\n    attachToComponent(component) {\n        component.on('render:finished', (component) => {\n            const urlUtils = new UrlUtils(window.location.href);\n            const currentUrl = urlUtils.toString();\n            Object.entries(this.mapping).forEach(([prop, mapping]) => {\n                const value = component.valueStore.get(prop);\n                urlUtils.set(mapping.name, value);\n            });\n            if (currentUrl !== urlUtils.toString()) {\n                HistoryStrategy.replace(urlUtils);\n            }\n        });\n    }\n}\n\nclass SetValueOntoModelFieldsPlugin {\n    attachToComponent(component) {\n        this.synchronizeValueOfModelFields(component);\n        component.on('render:finished', () => {\n            this.synchronizeValueOfModelFields(component);\n        });\n    }\n    synchronizeValueOfModelFields(component) {\n        component.element.querySelectorAll('[data-model]').forEach((element) => {\n            if (!(element instanceof HTMLElement)) {\n                throw new Error('Invalid element using data-model.');\n            }\n            if (element instanceof HTMLFormElement) {\n                return;\n            }\n            if (!elementBelongsToThisComponent(element, component)) {\n                return;\n            }\n            const modelDirective = getModelDirectiveFromElement(element);\n            if (!modelDirective) {\n                return;\n            }\n            const modelName = modelDirective.action;\n            if (component.getUnsyncedModels().includes(modelName)) {\n                return;\n            }\n            if (component.valueStore.has(modelName)) {\n                setValueOnElement(element, component.valueStore.get(modelName));\n            }\n            if (element instanceof HTMLSelectElement && !element.multiple) {\n                component.valueStore.set(modelName, getValueFromElement(element, component.valueStore));\n            }\n        });\n    }\n}\n\nclass ValidatedFieldsPlugin {\n    attachToComponent(component) {\n        component.on('model:set', (modelName) => {\n            this.handleModelSet(modelName, component.valueStore);\n        });\n    }\n    handleModelSet(modelName, valueStore) {\n        if (valueStore.has('validatedFields')) {\n            const validatedFields = [...valueStore.get('validatedFields')];\n            if (!validatedFields.includes(modelName)) {\n                validatedFields.push(modelName);\n            }\n            valueStore.set('validatedFields', validatedFields);\n        }\n    }\n}\n\nclass LiveControllerDefault extends Controller {\n    constructor() {\n        super(...arguments);\n        this.pendingActionTriggerModelElement = null;\n        this.elementEventListeners = [\n            { event: 'input', callback: (event) => this.handleInputEvent(event) },\n            { event: 'change', callback: (event) => this.handleChangeEvent(event) },\n        ];\n        this.pendingFiles = {};\n    }\n    initialize() {\n        this.mutationObserver = new MutationObserver(this.onMutations.bind(this));\n        this.createComponent();\n    }\n    connect() {\n        this.connectComponent();\n        this.mutationObserver.observe(this.element, {\n            attributes: true,\n        });\n    }\n    disconnect() {\n        this.disconnectComponent();\n        this.mutationObserver.disconnect();\n    }\n    update(event) {\n        if (event.type === 'input' || event.type === 'change') {\n            throw new Error(`Since LiveComponents 2.3, you no longer need data-action=\"live#update\" on form elements. Found on element: ${getElementAsTagText(event.currentTarget)}`);\n        }\n        this.updateModelFromElementEvent(event.currentTarget, null);\n    }\n    action(event) {\n        const params = event.params;\n        if (!params.action) {\n            throw new Error(`No action name provided on element: ${getElementAsTagText(event.currentTarget)}. Did you forget to add the \"data-live-action-param\" attribute?`);\n        }\n        const rawAction = params.action;\n        const actionArgs = { ...params };\n        delete actionArgs.action;\n        const directives = parseDirectives(rawAction);\n        let debounce = false;\n        directives.forEach((directive) => {\n            let pendingFiles = {};\n            const validModifiers = new Map();\n            validModifiers.set('stop', () => {\n                event.stopPropagation();\n            });\n            validModifiers.set('self', () => {\n                if (event.target !== event.currentTarget) {\n                    return;\n                }\n            });\n            validModifiers.set('debounce', (modifier) => {\n                debounce = modifier.value ? Number.parseInt(modifier.value) : true;\n            });\n            validModifiers.set('files', (modifier) => {\n                if (!modifier.value) {\n                    pendingFiles = this.pendingFiles;\n                }\n                else if (this.pendingFiles[modifier.value]) {\n                    pendingFiles[modifier.value] = this.pendingFiles[modifier.value];\n                }\n            });\n            directive.modifiers.forEach((modifier) => {\n                if (validModifiers.has(modifier.name)) {\n                    const callable = validModifiers.get(modifier.name) ?? (() => { });\n                    callable(modifier);\n                    return;\n                }\n                console.warn(`Unknown modifier ${modifier.name} in action \"${rawAction}\". Available modifiers are: ${Array.from(validModifiers.keys()).join(', ')}.`);\n            });\n            for (const [key, input] of Object.entries(pendingFiles)) {\n                if (input.files) {\n                    this.component.files(key, input);\n                }\n                delete this.pendingFiles[key];\n            }\n            this.component.action(directive.action, actionArgs, debounce);\n            if (getModelDirectiveFromElement(event.currentTarget, false)) {\n                this.pendingActionTriggerModelElement = event.currentTarget;\n            }\n        });\n    }\n    $render() {\n        return this.component.render();\n    }\n    emit(event) {\n        this.getEmitDirectives(event).forEach(({ name, data, nameMatch }) => {\n            this.component.emit(name, data, nameMatch);\n        });\n    }\n    emitUp(event) {\n        this.getEmitDirectives(event).forEach(({ name, data, nameMatch }) => {\n            this.component.emitUp(name, data, nameMatch);\n        });\n    }\n    emitSelf(event) {\n        this.getEmitDirectives(event).forEach(({ name, data }) => {\n            this.component.emitSelf(name, data);\n        });\n    }\n    $updateModel(model, value, shouldRender = true, debounce = true) {\n        return this.component.set(model, value, shouldRender, debounce);\n    }\n    propsUpdatedFromParentValueChanged() {\n        this.component._updateFromParentProps(this.propsUpdatedFromParentValue);\n    }\n    fingerprintValueChanged() {\n        this.component.fingerprint = this.fingerprintValue;\n    }\n    getEmitDirectives(event) {\n        const params = event.params;\n        if (!params.event) {\n            throw new Error(`No event name provided on element: ${getElementAsTagText(event.currentTarget)}. Did you forget to add the \"data-live-event-param\" attribute?`);\n        }\n        const eventInfo = params.event;\n        const eventArgs = { ...params };\n        delete eventArgs.event;\n        const directives = parseDirectives(eventInfo);\n        const emits = [];\n        directives.forEach((directive) => {\n            let nameMatch = null;\n            directive.modifiers.forEach((modifier) => {\n                switch (modifier.name) {\n                    case 'name':\n                        nameMatch = modifier.value;\n                        break;\n                    default:\n                        throw new Error(`Unknown modifier ${modifier.name} in event \"${eventInfo}\".`);\n                }\n            });\n            emits.push({\n                name: directive.action,\n                data: eventArgs,\n                nameMatch,\n            });\n        });\n        return emits;\n    }\n    createComponent() {\n        const id = this.element.id || null;\n        this.component = new Component(this.element, this.nameValue, this.propsValue, this.listenersValue, id, LiveControllerDefault.backendFactory(this), new StimulusElementDriver(this));\n        this.proxiedComponent = proxifyComponent(this.component);\n        Object.defineProperty(this.element, '__component', {\n            value: this.proxiedComponent,\n            writable: true,\n        });\n        if (this.hasDebounceValue) {\n            this.component.defaultDebounce = this.debounceValue;\n        }\n        const plugins = [\n            new LoadingPlugin(),\n            new LazyPlugin(),\n            new ValidatedFieldsPlugin(),\n            new PageUnloadingPlugin(),\n            new PollingPlugin(),\n            new SetValueOntoModelFieldsPlugin(),\n            new QueryStringPlugin(this.queryMappingValue),\n            new ChildComponentPlugin(this.component),\n        ];\n        plugins.forEach((plugin) => {\n            this.component.addPlugin(plugin);\n        });\n    }\n    connectComponent() {\n        this.component.connect();\n        this.mutationObserver.observe(this.element, {\n            attributes: true,\n        });\n        this.elementEventListeners.forEach(({ event, callback }) => {\n            this.component.element.addEventListener(event, callback);\n        });\n        this.dispatchEvent('connect');\n    }\n    disconnectComponent() {\n        this.component.disconnect();\n        this.elementEventListeners.forEach(({ event, callback }) => {\n            this.component.element.removeEventListener(event, callback);\n        });\n        this.dispatchEvent('disconnect');\n    }\n    handleInputEvent(event) {\n        const target = event.target;\n        if (!target) {\n            return;\n        }\n        this.updateModelFromElementEvent(target, 'input');\n    }\n    handleChangeEvent(event) {\n        const target = event.target;\n        if (!target) {\n            return;\n        }\n        this.updateModelFromElementEvent(target, 'change');\n    }\n    updateModelFromElementEvent(element, eventName) {\n        if (!elementBelongsToThisComponent(element, this.component)) {\n            return;\n        }\n        if (!(element instanceof HTMLElement)) {\n            throw new Error('Could not update model for non HTMLElement');\n        }\n        if (element instanceof HTMLInputElement && element.type === 'file') {\n            const key = element.name;\n            if (element.files?.length) {\n                this.pendingFiles[key] = element;\n            }\n            else if (this.pendingFiles[key]) {\n                delete this.pendingFiles[key];\n            }\n        }\n        const modelDirective = getModelDirectiveFromElement(element, false);\n        if (!modelDirective) {\n            return;\n        }\n        const modelBinding = getModelBinding(modelDirective);\n        if (!modelBinding.targetEventName) {\n            modelBinding.targetEventName = 'input';\n        }\n        if (this.pendingActionTriggerModelElement === element) {\n            modelBinding.shouldRender = false;\n        }\n        if (eventName === 'change' && modelBinding.targetEventName === 'input') {\n            modelBinding.targetEventName = 'change';\n        }\n        if (eventName && modelBinding.targetEventName !== eventName) {\n            return;\n        }\n        if (false === modelBinding.debounce) {\n            if (modelBinding.targetEventName === 'input') {\n                modelBinding.debounce = true;\n            }\n            else {\n                modelBinding.debounce = 0;\n            }\n        }\n        const finalValue = getValueFromElement(element, this.component.valueStore);\n        this.component.set(modelBinding.modelName, finalValue, modelBinding.shouldRender, modelBinding.debounce);\n    }\n    dispatchEvent(name, detail = {}, canBubble = true, cancelable = false) {\n        detail.controller = this;\n        detail.component = this.proxiedComponent;\n        this.dispatch(name, { detail, prefix: 'live', cancelable, bubbles: canBubble });\n    }\n    onMutations(mutations) {\n        mutations.forEach((mutation) => {\n            if (mutation.type === 'attributes' &&\n                mutation.attributeName === 'id' &&\n                this.element.id !== this.component.id) {\n                this.disconnectComponent();\n                this.createComponent();\n                this.connectComponent();\n            }\n        });\n    }\n}\nLiveControllerDefault.values = {\n    name: String,\n    url: String,\n    props: { type: Object, default: {} },\n    propsUpdatedFromParent: { type: Object, default: {} },\n    listeners: { type: Array, default: [] },\n    eventsToEmit: { type: Array, default: [] },\n    eventsToDispatch: { type: Array, default: [] },\n    debounce: { type: Number, default: 150 },\n    fingerprint: { type: String, default: '' },\n    requestMethod: { type: String, default: 'post' },\n    queryMapping: { type: Object, default: {} },\n};\nLiveControllerDefault.backendFactory = (controller) => new Backend(controller.urlValue, controller.requestMethodValue);\n\nexport { Component, LiveControllerDefault as default, getComponent };\n","import { Controller } from '@hotwired/stimulus'\nimport { getComponent } from '@symfony/ux-live-component';\n\nexport default class extends Controller {\n    async initialize() {\n        this.component = await getComponent(this.element);\n    }\n\n    async open (event) {\n        event.preventDefault()\n        const { ticketId, url } = event.currentTarget.dataset\n\n        window.history.pushState({ path: url }, '', url)\n\n        const header = await getComponent(document.querySelector('#public-chat-header'))\n        this.component.action('details', { ticketId }).then(() => {\n            OpenHelpChat.subscribe(ticketId)\n\n            header.set('ticketId', ticketId)\n            header.render();\n        })\n    }\n}\n","import { Controller } from '@hotwired/stimulus'\n\nfunction debounce(fn, delay = 300) {\n    let timer = null\n    return (...args) => {\n        clearTimeout(timer)\n        timer = setTimeout(() => fn(...args), delay)\n    }\n}\n\nexport default class extends Controller {\n\n    static targets = ['input', 'results']\n    // static values = {\n    //     url: String\n    // }\n\n    connect() {\n        this.debouncedSearch = debounce(this.search.bind(this), 300)\n    }\n\n    async search(event) {\n        const query = this.inputTarget.value.trim()\n\n        if (query.length < 3) {\n            return;\n        }\n\n        const requestUrl = new URL(this.resultsTarget.dataset.url, window.location.origin)\n        requestUrl.searchParams.set('query', query)\n\n        try {\n            const response = await fetch(requestUrl, {\n                headers: { 'X-Requested-With': 'XMLHttpRequest' }\n            })\n\n            const result = await response.json();\n\n            let html = '';\n            if (result.length === 0) {\n                html = '<span class=\"dropdown__item-empty\">There are no matching agents.</span>';\n            } else {\n                for (let userId in result) {\n                    html += `\n                        <div class=\"dropdown__item\">\n                            <a class=\"btn__primary\"\n                                data-action=\"click->UserAutocomplete#setUser\"\n                                data-UserAutocomplete-user-id-param=\"${userId}\"\n                                data-user-id=\"${userId}\"\n                            >\n                                <i class=\"icon-agent\"></i>\n                                <span class=\"btn__text\">\n                                    ${result[userId]}\n                                </span>\n                            </a>\n                        </div>\n                    `;\n                }\n            }\n\n            this.resultsTarget.innerHTML = `<div class=\"dropdown__menu-bot\">${html}</div>`;\n        } catch (e) {\n            console.error('Autocomplete fetch failed:', e)\n            this.resultsTarget.innerHTML = '<div class=\"dropdown__item-empty\">Error</div>';\n        }\n    }\n\n    setUser(event) {\n        const { userId } = event.params;\n\n        const parentLive = document.querySelector(this.resultsTarget.dataset.parentElementQuery);\n        const parentComponent = this.application.getControllerForElementAndIdentifier(parentLive, parentLive.dataset.controller)\n\n        let { parentActionName, parentActionParams } = this.resultsTarget.dataset;\n\n        parentActionParams = Object.assign({}, JSON.parse(parentActionParams) || {}, { userId })\n        parentComponent.component.action(parentActionName, parentActionParams);\n    }\n\n    onInput(event) {\n        this.debouncedSearch(event)\n    }\n}\n","import { Controller } from '@hotwired/stimulus'\nimport { getComponent } from '@symfony/ux-live-component';\n\nexport default class extends Controller {\n    open(event) {\n        const ignoreTags = ['A', 'BUTTON', 'INPUT', 'TEXTAREA', 'SELECT']\n        if (ignoreTags.includes(event.target.tagName)) {\n            return\n        }\n\n        if (event.target.closest('.dropdown')) {\n            return\n        }\n\n        document.location.href = event.currentTarget.dataset.url;\n    }\n}\n","import { Controller } from '@hotwired/stimulus'\nimport { getComponent } from '@symfony/ux-live-component';\n\nfunction debounce(fn, delay = 500) {\n    let timeout\n    return (...args) => {\n        clearTimeout(timeout)\n        timeout = setTimeout(() => fn(...args), delay)\n    }\n}\n\nexport default class extends Controller {\n    static targets = ['input']\n\n    async initialize() {\n        this.component = await getComponent(this.element);\n        this.debouncedSave = debounce(this.save.bind(this), 500)\n    }\n\n    onInput() {\n        this.debouncedSave()\n    }\n\n    async save() {\n        const ticketTitle = this.inputTarget.value.trim()\n        await this.component.action('save', {\n            ticketTitle\n        })\n    }\n}\n","import { Application } from '@hotwired/stimulus'\nimport LiveController from '@symfony/ux-live-component'\nimport TicketListController from './controllers/TicketListController.js'\nimport UserAutocompleteController from './controllers/UserAutocompleteController.js'\nimport RecentTicketsController from \"./controllers/RecentTicketsController\";\nimport TicketHeaderController from \"./controllers/TicketHeaderController\";\n\nconst application = Application.start()\napplication.register('live', LiveController)\napplication.register('TicketList', TicketListController)\napplication.register('TicketHeader', TicketHeaderController)\napplication.register('RecentTickets', RecentTicketsController)\napplication.register('UserAutocomplete', UserAutocompleteController)\n\napplication.debug = true;\nwindow.Stimulus = application\nconsole.log('Stimulus started')\n"],"names":["EventListener","eventTarget","eventName","eventOptions","binding","event","extendedEvent","extendEvent","left","right","leftIndex","rightIndex","stopImmediatePropagation","Dispatcher","application","eventListener","listeners","map","clearEventListeners","error","message","detail","eventListenerMap","cacheKey","parts","key","defaultActionDescriptorFilters","value","element","descriptorPattern","parseActionDescriptorString","descriptorString","matches","keyFilter","parseEventTarget","parseEventOptions","eventTargetName","options","token","stringifyEventTarget","camelize","_","char","namespaceCamelize","capitalize","dasherize","tokenize","isSomething","object","hasProperty","property","allModifiers","Action","index","descriptor","schema","getDefaultEventNameForElement","eventFilter","filters","standardFilter","params","pattern","name","match","typecast","meta","ctrl","alt","shift","modifier","defaultEventNames","e","tagName","Binding","context","action","actionEvent","method","actionDescriptorFilters","controller","passes","filter","target","currentTarget","identifier","ElementObserver","delegate","mutations","callback","mutation","attributeName","nodes","node","tree","processor","AttributeObserver","add","fetch","del","prune","values","Multimap","set","size","_key","_values","SelectorObserver","selector","details","selectors","_attributeName","matchedBefore","StringMapObserver","oldValue","attribute","TokenListObserver","unmatchedTokens","matchedTokens","tokens","previousTokens","currentTokens","firstDifferingIndex","zip","previousToken","currentToken","tokensAreEqual","tokenString","parseTokenString","content","length","ValueListObserver","parseResult","valuesByToken","BindingObserver","ValueObserver","receiver","defaultValue","writer","rawValue","rawOldValue","changedMethodName","changedMethod","valueDescriptorMap","descriptors","hasMethodName","TargetObserver","_a","readInheritableStaticArrayValues","constructor","propertyName","ancestors","getAncestorsForConstructor","getOwnStaticArrayValues","readInheritableStaticObjectPairs","pairs","getOwnStaticObjectPairs","definition","OutletObserver","outletName","observer","_selector","outlet","hasOutlet","hasOutletController","_element","selectorObserver","attributeObserver","dependencies","module","identifiers","Context","scope","functionName","methodName","args","bless","shadow","getBlessedProperties","properties","shadowConstructor","extend","shadowProperties","getShadowProperties","blessedProperties","blessing","prototype","getOwnKeys","getShadowedDescriptor","shadowingDescriptor","extendWithReflect","extended","testReflectExtension","b","blessDefinition","Module","ClassMap","DataMap","Guide","logger","warnedKeys","attributeValueContainsToken","TargetSet","targetName","targetNames","targets","targetDescriptor","revisedAttributeName","OutletSet","controllerElement","outletNames","outlets","controllerAttribute","Scope","ScopeObserver","scopesByIdentifier","referenceCount","Router","contexts","afterLoad","defaultSchema","objectFromEntries","c","n","array","memo","k","v","Application","domReady","controllerConstructor","head","rest","resolve","ClassPropertiesBlessing","classDefinition","propertiesForClassDefinition","classes","OutletPropertiesBlessing","outletDefinition","propertiesForOutletDefinition","getOutletController","getControllerAndEnsureConnectedScope","outletController","camelizedName","outletElement","TargetPropertiesBlessing","targetDefinition","propertiesForTargetDefinition","ValuePropertiesBlessing","valueDefinitionPairs","propertyDescriptorMap","result","valueDefinitionPair","valueDescriptor","parseValueDefinitionPair","propertiesForValueDefinitionPair","read","write","typeDefinition","valueDescriptorForTokenAndTypeDefinition","parseValueTypeConstant","constant","parseValueTypeDefault","parseValueTypeObject","payload","typeObject","hasType","hasDefault","fullObject","onlyType","onlyDefault","typeFromObject","typeFromDefaultValue","propertyPath","parseValueTypeDefinition","typeFromConstant","type","defaultValueForDefinition","defaultValuesByType","constantFromType","readers","writers","writeString","writeJSON","Controller","_identifier","_application","prefix","bubbles","cancelable","BackendRequest","promise","actions","updateModels","response","targetedActions","targetedModels","model","RequestBuilder","url","props","updated","children","updatedPropsFromParent","files","splitUrl","queryString","fetchOptions","totalFiles","total","current","hasFingerprints","requestData","formData","i","paramsString","propsJson","updatedJson","childrenJson","propsFromParentJson","Backend","backendAction","BackendResponse","getElementAsTagText","componentMapByElement","componentMapByComponent","registerComponent","component","unregisterComponent","getComponent","reject","count","maxCount","interval","findComponents","currentComponent","onlyParents","onlyMatchName","components","componentName","findChildren","foundChildComponent","childComponentName","childComponent","findParent","parentElement","HookManager","hookName","hooks","ChangingItemsTracker","itemName","newValue","previousValue","removedRecord","originalRecord","currentValue","trueOriginalValue","ElementChanges","className","styleName","originalValue","change","ExternalMutationTracker","shouldTrackChangeCallback","handledAttributeMutations","isChangeInAddedElement","addedElement","changedElement","elementChanges","previousValues","newValues","addedValues","removedValues","previousStyles","newStyles","addedOrChangedStyles","removedStyles","style","styles","styleObject","parseDirectives","directives","currentActionName","currentArgumentValue","currentArguments","currentModifiers","state","getLastActionName","pushInstruction","pushArgument","pushModifier","combineSpacedArray","finalParts","part","trimAll","str","normalizeModelName","s","getValueFromElement","valueStore","modelNameData","getModelDirectiveFromElement","modelValue","getMultipleCheckboxValue","inputValue","el","setValueOnElement","val","arrayWrappedValue","option","getAllModelDirectiveFromElements","directive","throwOnMissing","dataModelDirectives","formElement","elementBelongsToThisComponent","cloneHTMLElement","newElement","htmlToElement","html","template","child","currentValues","finalValues","Idiomorph","EMPTY_SET","defaults","noOp","elt","morph","oldNode","newContent","config","parseContent","normalizedContent","normalizeContent","ctx","createMorphContext","morphNormalizedContent","normalizedNewContent","oldHead","newHead","promises","handleHeadElement","morphChildren","bestMatch","findBestNodeMatch","previousSibling","nextSibling","morphedNode","morphOldNodeTo","insertSiblings","ignoreValueOfActiveElement","possibleActiveElement","isSoftMatch","syncNodeFrom","newParent","oldParent","nextNewChild","insertionPoint","newChild","removeIdsFromConsideration","isIdSetMatch","idSetMatch","findIdSetMatch","removeNodesBetween","softMatch","findSoftMatch","tempNode","removeNode","ignoreAttribute","attr","to","updateType","from","fromAttributes","toAttributes","fromAttribute","toAttribute","syncInputValue","syncBooleanAttribute","ignoreUpdate","fromValue","toValue","newHeadTag","currentHead","added","removed","preserved","nodesToAppend","headMergeStyle","srcToNewHeadNodes","newHeadChild","currentHeadElt","inNewContent","isReAppended","isPreserved","newNode","newElt","_resolve","removedElement","mergeDefaults","finalConfig","createIdMap","node1","node2","getIdIntersectionCount","startInclusive","endExclusive","newChildPotentialIdCount","potentialMatch","otherMatchCount","potentialSoftMatch","siblingSoftMatchCount","parser","contentWithSvgsRemoved","htmlElement","dummyParent","stack","currentElement","bestElement","score","newScore","scoreElement","isIdInConsideration","id","idIsWithinNode","targetNode","idSet","sourceSet","matchCount","populateIdMapForNode","idMap","nodeParent","idElements","oldContent","normalizeAttributesForComparison","syncAttributes","fromEl","toEl","executeMorphdom","rootFromElement","rootToElement","modifiedFieldElements","getElementValue","externalMutationTracker","originalElementIdsToSwapAfter","originalElementsToPreserve","markElementAsNeedingPostMorphSwap","replaceWithClone","oldElement","clonedOldElement","clonedFromEl","normalizedFromEl","normalizedToEl","originalElement","UnsyncedInputsTracker","modelElementResolver","UnsyncedInputContainer","modelName","getDeepData","data","currentLevelData","finalKey","parseDeepData","finalData","ValueStore","normalizedName","changed","Component","backend","elementDriver","listener","plugin","reRender","debounce","isChanged","input","onlyMatchingComponentsNamed","emitUp","matchingName","thisPromiseResolve","filesToSend","requestConfig","backendResponse","headers","controls","modifiedModelValues","newProps","eventsToEmit","browserEventsToDispatch","modal","iframe","closeModal","proxifyComponent","prop","callable","StimulusElementDriver","modelDirective","getModelBinding","shouldRender","targetEventName","innerModelName","ChildComponentPlugin","modelDirectives","fingerprints","parentComponent","modelBinding","LazyPlugin","entries","entry","LoadingPlugin","request","targetElement","backendRequest","isLoading","finalAction","parseLoadingAction","delay","validModifiers","loadingDirective","loadingDirectives","matchingElements","attributes","PageUnloadingPlugin","PollingDirector","actionName","duration","timer","PollingPlugin","rawPollConfig","isValueEmpty","toQueryString","buildQueryStringEntries","baseKey","iKey","iValue","fromQueryString","search","insertDotNotatedValueIntoData","first","second","dotNotatedKey","UrlUtils","HistoryStrategy","QueryStringPlugin","mapping","urlUtils","currentUrl","SetValueOntoModelFieldsPlugin","ValidatedFieldsPlugin","validatedFields","LiveControllerDefault","rawAction","actionArgs","pendingFiles","nameMatch","eventInfo","eventArgs","emits","finalValue","canBubble","TicketListController","ticketId","header","fn","UserAutocompleteController","query","requestUrl","userId","parentLive","parentActionName","parentActionParams","__publicField","RecentTicketsController","timeout","TicketHeaderController","ticketTitle","LiveController"],"mappings":"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","x_google_ignoreList":[0]}